dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
# Load the similarity results
similarityCols <- c("seed", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
similarity <- loadResults("evaluate_similarity", "similarity.txt",
similarityCols)
########
cluster$pval <- -log10(cluster$pval)
cluster$pvalcox <- -log10(cluster$pvalcox)
cluster$con_index_p <- -log10(cluster$con_index_p)
# originalCluster$pval <- -log10(originalCluster$pval)
# originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
# originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
similarity$pval <- -log10(similarity$pval)
similarity$pvalcox <- -log10(similarity$pvalcox)
similarity$con_index_p <- -log10(similarity$con_index_p)
# originalSimilarity$pval <- -log10(originalSimilarity$pval)
# originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
# originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
# Combine the similarity and clustering data sets
# Similarity:
# -add "cluster" column, with "SNF" in each entry
# -rename "similarity" column to "impute"
newSimilarity <- similarity
colnames(newSimilarity)[similarityCols=="similarity"] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- cluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(impute, cluster, acc, nmi,
pval, ci, se.std, pvalcox, coefcox, con_index_ci, con_index_p,
bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
# Write combinedScores to results folder
write.csv(combinedScores, paste0(results_folder, '/scoresCombatDup.csv'))
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 5)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
colnames(testScores) <- c("method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
View(cluster)
# Compare if the mean of method 1 is significantly greater than the
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 5)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
colnames(testScores) <- c("method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
View(combinedScores)
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 5)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
colnames(testScores) <- c("method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
View(testScores)
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
Evalute the results of the evaluate_imputation tests
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Combat", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- 'LUSC'
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
# cluster <- loadResults("evaluate_imputation", "clustering.txt",
#                        clusterCols)
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols[-2])
# Load the similarity results
similarityCols <- c("seed", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
# similarity <- loadResults("evaluate_similarity", "similarity.txt",
#                           similarityCols)
originalSimilarity <- loadResults("evaluate_original_similarity",
"similarity.txt",
similarityCols[-1])
Transform pval to -log10(pval)
#
# cluster$pval <- -log10(cluster$pval)
# cluster$pvalcox <- -log10(cluster$pvalcox)
# cluster$con_index_p <- -log10(cluster$con_index_p)
originalCluster$pval <- -log10(originalCluster$pval)
originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
# similarity$pval <- -log10(similarity$pval)
# similarity$pvalcox <- -log10(similarity$pvalcox)
# similarity$con_index_p <- -log10(similarity$con_index_p)
originalSimilarity$pval <- -log10(originalSimilarity$pval)
originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
############################################################################
# Rank original clustering and similarity resutls
# Combine the similarity and clustering data sets
# Similarity:
# -add "cluster" column, with "SNF" in each entry
# -rename "similarity" column to "impute"
newSimilarity <- originalSimilarity
colnames(newSimilarity)[1] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- originalCluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(impute, cluster, acc, nmi,
pval, ci, se.std, pvalcox, coefcox, con_index_ci, con_index_p,
bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
# Write combinedScores to results folder
write.csv(combinedScores, paste0(results_folder, '/scoresCombatOrigDup.csv'))
# Compare if the mean of method 1 is significantly greater than the
# mean of method 2, for every pair of methods and cancer type
testScores <- matrix(, 0, 5)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, method==met2)
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
}
testScores <- rbind(testScores,
c(met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
colnames(testScores) <- c("method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
View(testScores)
# This script tests if the missing data is random or structured
library(MASS)
library(BaylorEdPsych)
library(mvnmle)
###############################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"evaluate_original_imputation", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
resultsFolder <- paste(testFolder, "Results", sep="/")
###############################################################################
# Initialize fixed variables
jvmGBLimit <- 8
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD","LUSC")
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 12
numFeat <- 2000
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
# Load the original data
loadData <- function(cancer) {
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
clinicalData <- loadData("clin")
# transform patient IDs to the clinical ID format
transformIDFormat <- function(x){
x <- substr(x, 1, 12)
x <- gsub('.', '-', x, fixed = TRUE)
x <- tolower(x)
return(x)
}
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
return(list(first = unionData, second = clinicalData))
}
#### Load in cases (full_data), not complete.
brca_full <- loadData(cancer = 'BRCA')
kirc_full <- loadData(cancer = 'KIRC')
lihc_full <- loadData(cancer = 'LIHC')
luad_full <- loadData(cancer = 'LUAD')
lusc_full <- loadData(cancer = 'LUSC')
####get gene data with three views
kirc_data_full <- kirc_full[[1]]
brca_data_full <- brca_full[[1]]
lihc_data_full <- lihc_full[[1]]
luad_data_full <- luad_full[[1]]
lusc_data_full <- lusc_full[[1]]
####get clinical data
kirc_clin <- kirc_full[[2]]
brca_clin <- brca_full[[2]]
lihc_clin <- lihc_full[[2]]
luad_clin <- luad_full[[2]]
lusc_clin <- lusc_full[[2]]
####### transform ids
transform  <- function(data){
transform_id_format <- function(x){
x <- substr(x, 1, 12)
x <- gsub('.', '-', x, fixed = TRUE)
x <- tolower(x)
return(x)
}
for(i in 1:3){
colnames(data[[i]]) <- transform_id_format(colnames(data[[i]]))
}
return(data)
}
kirc_data_full <- transform(kirc_data_full)
brca_data_full <- transform(brca_data_full)
lihc_data_full <- transform(lihc_data_full)
luad_data_full <- transform(luad_data_full)
lusc_data_full <- transform(lusc_data_full)
# Split in data types
kirc_methyl <- kirc_data_full[[1]]
kirc_mirna <- kirc_data_full[[2]]
kirc_mrna <- kirc_data_full[[3]]
brca_methyl <- brca_data_full[[1]]
brca_mirna <- brca_data_full[[2]]
brca_mrna <- brca_data_full[[3]]
lihc_methyl <- lihc_data_full[[1]]
lihc_mirna <- lihc_data_full[[2]]
lihc_mrna <- lihc_data_full[[3]]
luad_methyl <- luad_data_full[[1]]
luad_mirna <- luad_data_full[[2]]
luad_mrna <- luad_data_full[[3]]
lusc_methyl <- lusc_data_full[[1]]
lusc_mirna <- lusc_data_full[[2]]
lusc_mrna <- lusc_data_full[[3]]
# Add surv time to each clinical data
survObject <- function(data) {
data$survTime <- data$days_to_death
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(data$survTime)
lastFollowup <- data$days_to_last_followup
data$survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
return(data)
}
brca_clin <- survObject(brca_clin)
kirc_clin <- survObject(kirc_clin)
lihc_clin <- survObject(lihc_clin)
luad_clin <- survObject(luad_clin)
lusc_clin <- survObject(lusc_clin)
addMissing <- function(methyl, mirna, mrna, clin) {
clin$methyl_missing <- apply(methyl, 2, function(x) all(is.na(x)))
clin$mirna_missing <- apply(mirna, 2, function(x) all(is.na(x)))
clin$mrna_missing <- apply(mrna, 2, function(x) all(is.na(x)))
return(clin)
}
brca_clin <- addMissing(brca_methyl, brca_mirna, brca_mrna, brca_clin)
kirc_clin <- addMissing(kirc_methyl, kirc_mirna, kirc_mrna, kirc_clin)
lihc_clin <- addMissing(lihc_methyl, lihc_mirna, lihc_mrna, lihc_clin)
luad_clin <- addMissing(luad_methyl, luad_mirna, luad_mrna, luad_clin)
lusc_clin <- addMissing(lusc_methyl, lusc_mirna, lusc_mrna, lusc_clin)
### MAR
Run t test on missing variables and each varible in clinical data (including survTime)
tTest <- function(data, data_type, column) {
data <- data[rowSums(is.na(data)) < 7,]
t.test(x = data[,column][which(data[,data_type] == "TRUE")],
y = data[,column][which(data[,data_type] == "FALSE")])
}
# As the p-value 0.4828 is greater than the .05 significance level, we do not reject the null
# hypothesis that the smoking habit is independent of the exercise level of the students.
cTest <- function(data, data_type, column) {
data <- data[rowSums(is.na(data)) < 7,]
tbl = table(data[,data_type], data[,column])
chisq.test(tbl)
}
#### br
tTest(brca_clin, "methyl_missing", "days_to_death")
tTest(brca_clin, "mirna_missing", "days_to_death")
tTest(brca_clin, "mrna_missing", "days_to_death")
tTest(kirc_clin, "methyl_missing", "survTime")
# Add column for where TRUE is NA and false is 1
LittleMcarMethyl <- function(data, vital_status = FALSE) {
data$methyl_missing <- as.integer(ifelse(data$methyl_missing == TRUE, NA, 1))
data$mirna_missing <-NULL
data$mrna_missing <- NULL
data <- data[rowSums(is.na(data)) < 8,]
data <- data[!is.na(data$survTime),]
data <- data[!is.na(data$vital_status),]
data$vital_status <- data$vital_status
missingInd <- is.na(data$methyl_missing)
if (vital_status) {
data$vital_status[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
} else {
data$survTime[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
}
}
LittleMcarMirna <- function(data, vital_status = FALSE) {
data$mirna_missing <- as.integer(ifelse(data$mirna_missing == TRUE, NA, 1))
data$methyl_missing <-NULL
data$mrna_missing <- NULL
data <- data[rowSums(is.na(data)) < 8,]
data <- data[!is.na(data$survTime),]
data <- data[!is.na(data$vital_status),]
data$vital_status <- data$vital_status
missingInd <- is.na(data$mirna_missing)
if (vital_status) {
data$vital_status[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
} else {
data$survTime[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
}
}
LittleMcarMrna <- function(data, vital_status = FALSE) {
data$mrna_missing <- as.integer(ifelse(data$mrna_missing == TRUE, NA, 1))
data$mirna_missing <-NULL
data$methyl_missing <- NULL
data <- data[rowSums(is.na(data)) < 8,]
data <- data[!is.na(data$survTime),]
data <- data[!is.na(data$vital_status),]
data$vital_status <- data$vital_status
missingInd <- is.na(data$mrna_missing)
if (vital_status) {
data$vital_status[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
} else {
data$survTime[missingInd] <- NA
data <- data[, c(6,7)]
LittleMCAR(data)
}
}
LittleMcarMethyl(kirc_clin)$p.value
LittleMcarMethyl(kirc_clin, vital_status = TRUE)$p.value
#BRCA
LittleMcarMethyl(brca_clin)$p.value
LittleMcarMethyl(brca_clin, vital_status = TRUE)$p.value
LittleMcarMirna(brca_clin)$p.value
LittleMcarMirna(brca_clin, vital_status = TRUE)$p.value
LittleMcarMrna(brca_clin)$p.value
LittleMcarMrna(brca_clin, vital_status = TRUE)$p.value
#KIRC
LittleMcarMethyl(kirc_clin)$p.value
LittleMcarMethyl(kirc_clin, vital_status = TRUE)$p.value
LittleMcarMirna(kirc_clin)$p.value
LittleMcarMirna(kirc_clin, vital_status = TRUE)$p.value
LittleMcarMrna(kirc_clin)$p.value
LittleMcarMrna(kirc_clin, vital_status = TRUE)$p.value
#LIHC
LittleMcarMethyl(lihc_clin)$p.value
LittleMcarMethyl(lihc_clin, vital_status = TRUE)$p.value
LittleMcarMirna(lihc_clin)$p.value
LittleMcarMirna(lihc_clin, vital_status = TRUE)$p.value
LittleMcarMrna(lihc_clin)$p.value
LittleMcarMrna(lihc_clin, vital_status = TRUE)$p.value
#LUAD
LittleMcarMethyl(luad_clin)$p.value
LittleMcarMethyl(luad_clin, vital_status = TRUE)$p.value
LittleMcarMirna(luad_clin)$p.value
LittleMcarMirna(luad_clin, vital_status = TRUE)$p.value
LittleMcarMrna(luad_clin)$p.value
LittleMcarMrna(luad_clin, vital_status = TRUE)$p.value
#LUSC
LittleMcarMethyl(lusc_clin)$p.value
LittleMcarMethyl(lusc_clin, vital_status = TRUE)$p.value
LittleMcarMirna(lusc_clin)$p.value
LittleMcarMirna(lusc_clin, vital_status = TRUE)$p.value
LittleMcarMrna(lusc_clin)$p.value
LittleMcarMrna(lusc_clin, vital_status = TRUE)$p.value
summary(glm(methyl_missing ~ days_to_death, data=brca_clin, family=binomial))
