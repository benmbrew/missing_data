help(survfit)
help(survival::survfit)
help(survival:::survfit)
plotSurvivalCurve <- function(clinicalData, labels) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
plotSurvivalCurve <- function(clinicalData) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
length(clinicalData)
plotSurvivalCurve <- function(data) {
# Retrieve the patient survival times and death status
survTime <- data$days_to_death
deathStatus <- data$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- data$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
clinicalData <- vector("list", length(cancerTypes))
for (i in 1:length(cancerTypes)) {
clinicalData[[i]] <- loadData(cancerTypes[i], "clin")
}
716/1102
315/539
284/377
430/529
354/504
methyl <- read.csv('/home/benbrew/Desktop/glioblastoma.csv')
methyl <- read.csv('/home/benbrew/Desktop/gbm/glioblastoma.csv')
methyl <- read.csv('/home/benbrew/Desktop/gbm/glioblastoma_methyl_cases.csv')
methyl <- read.csv('/home/benbrew/Desktop/gbm/glioblastoma_methyl_cases.txt')
View(methyl)
methyl <- read.txt('/home/benbrew/Desktop/gbm/glioblastoma_methyl_cases.txt')
methyl <- read.table('/home/benbrew/Desktop/gbm/glioblastoma_methyl_cases.txt')
View(methyl)
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben/"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
rawDataFolder <- paste(homeFolder, "projects/SNF/NM_2015/Data", sep="/")
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben/"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
rawDataFolder <- paste(homeFolder, "projects/SNF/NM_2015/Data", sep="/")
######################################################################
# Initialize helper functions
loadData <- function(cancer, dataType, fileSuffix) {
processingResult <- "BasicProcessingResult"
rownamesIndex <- 1
removeIndices <- 1:2
if (dataType=="methyl") {
processingResult <- "AdvancedProcessingResult"
} else if (dataType=="mirna") {
removeIndices <- 1
} else if (dataType=="rna") {
rownamesIndex <- 2
}
# Load the data
data <- NULL
fileName <- paste(cancer, dataType, fileSuffix, sep="_")
filePath <- paste(rawDataFolder, cancer, processingResult, fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Rename the columns and rows
colnames(data) <- substr(colnames(data), 1, 16)
rownames(data) <- data[, rownamesIndex]
# Convert the data frame to a numeric matrix
data <- as.matrix(data[, -removeIndices])
}
return(data)
}
primarySolidTumors <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "01")
}
solidTissueNormals <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "11")
}
otherSampleTypes <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType[!(sampleType %in% c("01", "11"))])
}
missingFeatures <- function(data) {
return(apply(data, 1, function(x) any(is.na(x))))
}
constantFeatures <- function(data) {
return(apply(data, 1, function(x) var(x)==0))
}
logTransformData <- function(data) {
return(log(data+1, base=2))
}
extractRelevantData <- function(data) {
# Remove features which are missing from any sample
data <- data[!missingFeatures(data), ]
# Remove features with no variance
data <- data[!constantFeatures(data), ]
# Extract the tumor and normal samples
cases <- data[, primarySolidTumors(data)]
controls <- data[, solidTissueNormals(data)]
return(list(cases=cases, controls=controls))
}
###
cancers <- c("glioblastoma")
for (cancer in cancers) {
# Process methylation
methyl <- loadData(cancer, "methyl", "450__All__Both.txt")
methylList <- extractRelevantData(methyl)
# Process miRNA
# Need to check if both of these exist!
mirna_ga <- loadData(cancer, "mirna", "ga__RPM.txt")
mirna_hiseq <- loadData(cancer, "mirna", "hiseq__RPM.txt")
mirna <- cbind(mirna_ga, mirna_hiseq)
mirna <- logTransformData(mirna)
mirnaList <- extractRelevantData(mirna)
# Process gene expression
mrna <- loadData(cancer, "rna", "gene.txt")
mrna <- logTransformData(mrna)
mrnaList <- extractRelevantData(mrna)
casesList <- list(methylList[[1]], mirnaList[[1]], mrnaList[[1]])
controlsList <- list(methylList[[2]], mirnaList[[2]], mrnaList[[2]])
dataLists <- list(casesList, controlsList)
# Save the data
sampleTypes <- c("cases", "controls")
dataTypes <- c("methyl", "mirna", "mrna")
for (i in 1:length(sampleTypes)) {
for (j in 1:length(dataTypes)) {
fileName <- paste(cancer, "_", dataTypes[j], "_",
sampleTypes[i], ".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
write.table(dataLists[[i]][[j]], filePath, sep="\t")
}
}
}
methyl <- read.table('/home/benbrew/Desktop/gbm/GBA_methyl_cases.txt')
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben/"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
rawDataFolder <- paste(homeFolder, "projects/SNF/NM_2015/Data", sep="/")
methyl <- read.table(paste0(rawDataFolder, '/GBA_methyl_cases.txt')
)
rawDataFolder, '/GBA_methyl_cases.txt')
paste0(rawDataFolder, '/GBA_methyl_cases.txt')
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'))
methyl <- read.table(paste0(rawDataFolder, '/GMB_methyl_cases.txt'))
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'))
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
rawDataFolder <- paste(homeFolder, "projects/SNF/NM_2015/Data", sep="/")
# read in data
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'))
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'))
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
rawDataFolder <- paste(homeFolder, "Projects/SNF/NM_2015/Data", sep="/")
# read in data
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'))
View(methyl)
mirna <- read.table(paste0(rawDataFolder, '/GBM_mirna_cases.txt'))
mrna <- read.table(paste0(rawDataFolder, '/GBM_mrna_cases.txt'))
View(mrna)
colnames(methyl) <- methyl[1,]
View(methyl)
colnames(methyl) <- as.character(methyl[1,])
View(methyl)
methyl_names <- methyl[1,]
mirna_names <- mirna[1,]
mrna_names <- mrna[1,]
methyl_names
mrna_names
mirna_names
intersection(methyl_names, mirna_names)
intersect(methyl_names, mirna_names)
methyl_names %in% mirna_names
mirna_names
sampleType <- substr(methyl_names, 14, 15)
methyl_names <- primarySolidTumors(methyl_names)
methyl_names <- solidTissueNormals(methyl_names)
methyl_names <- otherSampleTypes(methyl_names)
methyl_names
methyl_names <- methyl[1,]
methyl_names <- primarySolidTumors(methyl_names)
methyl_names
methyl_names <- methyl[1,]
mirna_names <- mirna[1,]
mrna_names <- mrna[1,]
methyl_names <- substr(methyl_names, 1, 16)
methyl_names
methyl_names <- methyl[1,]
methyl_names
methyl <- read.table(paste0(rawDataFolder, '/GBM_methyl_cases.txt'), stringsAsFactors = F)
mirna <- read.table(paste0(rawDataFolder, '/GBM_mirna_cases.txt'), stringsAsFactors = F)
mrna <- read.table(paste0(rawDataFolder, '/GBM_mrna_cases.txt'), stringsAsFactors = F)
# make first row the colnames
methyl_names <- methyl[1,]
mirna_names <- mirna[1,]
mrna_names <- mrna[1,]
methyl_names
methyl_names <- substr(methyl_names, 1, 16)
methyl_names
methyl_names <- methyl[1,]
mirna_names <- mirna[1,]
mrna_names <- mrna[1,]
methyl_names <- substr(methyl_names, 1, 16)
mirna_names <- substr(mirna_names, 1, 16)
mrna_names <- substr(mrna_names, 1, 16)
mrna_names
methyl_names %in% mrna_names
primarySolidTumors <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "01")
}
solidTissueNormals <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "11")
}
otherSampleTypes <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType[!(sampleType %in% c("01", "11"))])
}
# apply these function to all three data types
methyl_names <- primarySolidTumors(methyl_names)
methyl_names <- solidTissueNormals(methyl_names)
methyl_names <- otherSampleTypes(methyl_names)
primarySolidTumors <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "01")
}
solidTissueNormals <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "11")
}
otherSampleTypes <- function(tcgaIDS) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType[!(sampleType %in% c("01", "11"))])
}
# apply these function to all three data types
methyl_names <- primarySolidTumors(methyl_names)
primarySolidTumors <- function(tcgaIDs) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "01")
}
solidTissueNormals <- function(tcgaIDs) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "11")
}
otherSampleTypes <- function(tcgaIDs) {
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType[!(sampleType %in% c("01", "11"))])
}
# apply these function to all three data types
methyl_names <- primarySolidTumors(methyl_names)
methyl_names
intersect(methyl_names, mirna_names)
methy_names %in% mirna_names
methyl_names %in% mirna_names
methyl_names %in% mrna_names
methyl_names <- methyl[1,]
mirna_names <- mirna[1,]
mrna_names <- mrna[1,]
methyl_names <- substr(methyl_names, 1, 16)
mirna_names <- substr(mirna_names, 1, 16)
mrna_names <- substr(mrna_names, 1, 16)
# intersection number
intersect(methyl_names, mirna_names)
intersect(methyl_names, mirna_names, mrna_names)
methyl_mirna <- intersect(methyl_names, mirna_names)
intersection <- intersect(methyl_mirna, mrna_names)
length(interaction())
length(intersection)
methyl_minra <- union(methyl_names, mirna_names)
union <- union(methyl_minra, mrna_names)
length(union)
273/508
508-273
235/508
# This script will run bumphunter on methylation probes
library(minfi)
library(bumphunter)
library(dplyr)
library(FDb.InfiniumMethylation.hg19)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(impute)
library(GenomicRanges)
library(biovizBase)
# Initialize folders
home_folder <- '/home/benbrew/hpf/largeprojects/agoldenb/ben/Projects'
project_folder <- paste0(home_folder, '/LFS')
test <- paste0(project_folder, '/Scripts/analyze')
data_folder <- paste0(project_folder, '/Data')
methyl_data <- paste0(data_folder, '/methyl_data')
clin_data <- paste0(data_folder, '/clin_data')
results_folder <- paste0(test, '/Results')
data_name <- '/
tab <- read.csv(paste0(data_folder, '/bump_hunter_results.csv'))
tab <- read.csv(paste0(data_folder, '/bump_hunter_results.csv'))
## Build GRanges with sequence lengths
View(tab)
View(tab)
