ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & bias) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(bias_corrected_c_index, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & coef) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanCoef = mean(coefcox, na.rm = T),
meanStd = mean(se.std, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (normal) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_p) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (acc_nmi) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
}
}
groupbyCancer(cancer = 1, scoresNormal, normal = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormal, acc_nmi = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalClust, normal = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDupClust, orig = TRUE, nopval = TRUE, title = 'Union BRCA Dup')
groupbyCancer(cancer = 3, scoresNormal, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormal, acc_nmi = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalClust, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormal, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalClust, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union lihc')
groupbyCancer(cancer = 3, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 3, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 3, scoresNormalOrigDupClust, orig = TRUE, nopval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 3, scoresNormalClust, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalClust, normal = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection lihc')
groupbyCancer(cancer = 3, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union lihc')
groupbyCancer(cancer = 3, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 3, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 3, scoresNormalOrigDupClust, orig = TRUE, nopval = TRUE, title = 'Pval Union lihc Dup')
groupbyCancer(cancer = 4, scoresNormal, normal = TRUE, title = 'Intersection luad')
groupbyCancer(cancer = 4, scoresNormal, acc_nmi = TRUE, title = 'Intersection luad')
groupbyCancer(cancer = 4, scoresNormalClust, normal = TRUE, title = 'Intersection luad')
groupbyCancer(cancer = 4, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection luad')
groupbyCancer(cancer = 4, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union luad')
groupbyCancer(cancer = 4, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 4, scoresNormalOrigDup, orig = TRUE, nopval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 4, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 4, scoresNormalOrigDupClust, orig = TRUE, nopval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 5, scoresNormal, normal = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormal, acc_nmi = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalClust, normal = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union lusc')
groupbyCancer(cancer = 5, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union lusc Dup')
groupbyCancer(cancer = 5, scoresNormalOrigDup, orig = TRUE, nopval = TRUE, title = 'Pval Union lusc Dup')
groupbyCancer(cancer = 5, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Pval Union lusc Dup')
groupbyCancer(cancer = 5, scoresNormalClust, normal = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalClust, acc_nmi = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalOrigDupClust, orig = TRUE, pval = TRUE, title = 'Pval Union lusc Dup')
groupbyCancer(cancer = 5, scoresNormalOrigDupClust, orig = TRUE, nopval = TRUE, title = 'Pval Union lusc Dup')
groupbyCancer(cancer = 5, scoresNormal1000, normal = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalOrigDup1000, orig = TRUE, pval = TRUE, title = 'Pval Union lusc Dup 1000')
groupbyCancer(cancer = 5, scoresNormal3000, normal = TRUE, title = 'Intersection lusc')
groupbyCancer(cancer = 5, scoresNormalOrigDup3000, orig = TRUE, pval = TRUE, title = 'Pval Union lusc Dup 3000')
groupbyCancer(cancer = 5, scoresOrigIntDup, orig = TRUE, int = TRUE, title = 'lusc Intersection of Union')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pval = TRUE, title = 'Intersection LUSC')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, acc_nmi = TRUE, pval = TRUE, title = 'Intersection LUSC')
groupbyCancer(cancer = 5, scoresLUSCOrigDup, orig = TRUE, pval = TRUE, title = 'Union LUSC duplicates removed')
groupbyCancer(cancer = 5, scoresLUSCOrigDup, orig = TRUE, nopval = TRUE, title = 'Union LUSC duplicates removed')
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Dup", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std","pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
impute <- loadResults("evaluate_imputation", "imputation.txt",
imputeCols)
# Load the similarity results
similarityCols <- c("cancer", "seed", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
similarity <- loadResults("evaluate_similarity", "similarity.txt", similarityCols)
######################################################################
# Transform pval to -log10(pval)
cluster$actual_pval <- cluster$pval
cluster$pval <- -log10(cluster$pval)
similarity$actual_pval <- similarity$pval
similarity$pval <- -log10(similarity$pval)
# -add "cluster" column, with "SNF" in each entry
# -rename "similarity" column to "impute"
newSimilarity <- similarity
colnames(newSimilarity)[similarityCols=="similarity"] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- cluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, cluster, acc, nmi,
pval, ci, se.std, pvalcox, coefcox, con_index_ci, con_index_p, bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
write.csv(combinedScores, paste0(results_folder, '/scoresTwoThousandDupClust3.csv'))
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 6)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(canc, met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
}
colnames(testScores) <- c("cancer", "method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
View(testScores)
######################################################################
# Load libraries
# library(dplyr)
# library(reshape2)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Dup", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load t
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std","pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols)
# Load the similarity results
similarityCols <- c("cancer", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
originalSimilarity <- loadResults("evaluate_original_similarity",
"similarity.txt",
similarityCols)
######################################################################
# Transf
originalCluster$pval <- -log10(originalCluster$pval)
originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
originalSimilarity$pval <- -log10(originalSimilarity$pval)
originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
# -add "cluster" column, with "SNF" in each entry
# -rename "similarity" column to "impute"
newSimilarity <- originalSimilarity
colnames(newSimilarity)[2] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- originalCluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, cluster, acc, nmi,
pval, ci, se.std, pvalcox, coefcox, con_index_ci, con_index_p, bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
write.csv(combinedScores, paste0(results_folder, '/scoresOrigTwoThousandDupClust3.csv'))
# Compare if the mean of method 1 is significantly greater than the
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 6)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
}
testScores <- rbind(testScores,
c(canc, met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
}
colnames(testScores) <- c("cancer", "method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
View(testScores)
warnings()
i = 1
j = 1
canc <- 1
met1 <- 1
met2 <- 2
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
score1
score2
testScores <- rbind(testScores,
c(canc, met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
met2
met2 <- 3
met1 <- 2
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
score1
score2
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
View(combinedScores)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Dup", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std","pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols)
# Load the similarity results
similarityCols <- c("cancer", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
originalSimilarity <- loadResults("evaluate_original_similarity",
"similarity.txt",
similarityCols)
######################################################################
# Transform pval to -log10(pval)
originalCluster$pval <- -log10(originalCluster$pval)
originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
originalSimilarity$pval <- -log10(originalSimilarity$pval)
originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
View(originalSimilarity)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Dup", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std","pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols)
# Load the similarity results
similarityCols <- c("cancer", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci",
"con_index_p", "bias_corrected_c_index")
originalSimilarity <- loadResults("evaluate_original_similarity",
"similarity.txt",
similarityCols)
######################################################################
# Transform pval to -log10(pval)
originalCluster$pval <- -log10(originalCluster$pval)
originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
originalSimilarity$pval <- -log10(originalSimilarity$pval)
originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
# -rename "similarity" column to "impute"
newSimilarity <- originalSimilarity
colnames(newSimilarity)[2] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- originalCluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, cluster, acc, nmi,
pval, ci, se.std, pvalcox, coefcox, con_index_ci, con_index_p, bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
write.csv(combinedScores, paste0(results_folder, '/scoresOrigTwoThousandDupClust3.csv'))
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 6)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- score1$acc > score2$acc
nmiVector[met2] <- score1$nmi > score2$nmi
pvalVector[met2] <-score1$pval > score2$pval
ciVector[met2] <-  score1$ci > score2$ci
}
testScores <- rbind(testScores,
c(canc, met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
}
colnames(testScores) <- c("cancer", "method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
View(testScores)
