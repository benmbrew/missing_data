help(survfit)
help(survival::survfit)
help(survival:::survfit)
plotSurvivalCurve <- function(clinicalData, labels) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
plotSurvivalCurve <- function(clinicalData) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
length(clinicalData)
plotSurvivalCurve <- function(data) {
# Retrieve the patient survival times and death status
survTime <- data$days_to_death
deathStatus <- data$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- data$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
clinicalData <- vector("list", length(cancerTypes))
for (i in 1:length(cancerTypes)) {
clinicalData[[i]] <- loadData(cancerTypes[i], "clin")
}
# Load libraries
library(SNFtool)
library(iClusterPlus)
######################################################################
# Initialize folders
homeFolder <- "/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Gender",
"cluster_complete_data", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
labelsFolder <- paste(resultsFolder, "Labels", sep="/")
######################################################################
# Initialize fixed variables
cancerTypes <- 'KIRC'
genderTypes <- c('male', 'female')
clusterSizes <- 5
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 35
numFeat <- 2000
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
extractRelevantColumns <- function(data) {
# List of features used for survival analysis
features <- c("admin.batch_number",
"patient.bcr_patient_barcode",
"patient.bcr_patient_uuid",
"patient.days_to_death",
"patient.days_to_last_followup",
"patient.days_to_last_known_alive",
"patient.vital_status"
"patient.gender")
patientFeatures <- paste("patient", features, sep=".")
# Add missing features to the data
missingFeaturesInd <- !(features %in% colnames(data))
data[features[missingFeaturesInd]] <- NA
# Extract and rename the relevant columns
data <- data[features]
colnames(data) <- features
return(data)
}
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
clinicalData <- loadClinData(cancer)
loadClinData <- function(cancer = 'KIRC') {
#   processingResult <- dataFolder
fileSuffix <- "clinical.txt"
# Load the data
data <- NULL
fileName <- paste(cancer, fileSuffix, sep="_")
filePath <- paste(dataFolder,fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Transpose the data
data <- transposeDataFrame(data)
}
return(data)
}
clinicalData <- loadClinData(cancer)
cancer <- 'KIRC'
# Process the clinical data
clinicalData <- loadClinData(cancer)
dataFolder <- paste(projectFolder, 'Data', sep = '/')
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
clinicalData <- loadClinData(cancer)
######################################################################
# Load libraries
library(SNFtool)
library(iClusterPlus)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Gender",
"cluster_complete_data", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
resultsFolder <- paste(testFolder, "Results", sep="/")
labelsFolder <- paste(resultsFolder, "Labels", sep="/")
cancerTypes <- 'KIRC'
genderTypes <- c('male', 'female')
clusterSizes <- 5
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 35
numFeat <- 2000
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
extractRelevantColumns <- function(data) {
# List of features used for survival analysis
features <- c("admin.batch_number",
"patient.bcr_patient_barcode",
"patient.bcr_patient_uuid",
"patient.days_to_death",
"patient.days_to_last_followup",
"patient.days_to_last_known_alive",
"patient.vital_status",
"patient.gender")
patientFeatures <- paste("patient", features, sep=".")
# Add missing features to the data
missingFeaturesInd <- !(features %in% colnames(data))
data[features[missingFeaturesInd]] <- NA
# Extract and rename the relevant columns
data <- data[features]
colnames(data) <- features
return(data)
}
loadClinData <- function(cancer = 'KIRC') {
#   processingResult <- dataFolder
fileSuffix <- "clinical.txt"
# Load the data
data <- NULL
fileName <- paste(cancer, fileSuffix, sep="_")
filePath <- paste(dataFolder,fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Transpose the data
data <- transposeDataFrame(data)
}
return(data)
}
# Load clinical data with batch number
cancer <- 'KIRC'
# Process the clinical data
clinicalData <- loadClinData(cancer)
clinicalData$patient.gender
clinicalData <- extractRelevantColumns(clinicalData)
clinicalData
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
completeData <- columnIntersection(cases)
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
completeData <- columnIntersection(cases)
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
# Subset the clinical data so that it corresponds to individuals
# in the complete data
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(completeIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
View(clinicalData)
