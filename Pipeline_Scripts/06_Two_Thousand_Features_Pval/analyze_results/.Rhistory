return(data)
}
unionStat <- rowStatistics(unionData)
unionData <- normalizeData(unionData, unionStat)
intersectedStat <- rowStatistics(intersectedData)
intersectedData <- normalizeData(intersectedData, intersectedStat)
################################
######################################################################
# Load libraries
library(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"evaluate_original_imputation", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
######################################################################
# Initialize fixed variables
jvmGBLimit <- 8
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 12
numFeat <- 2000
# Initialize variable parameters
# Data s
cancer <- 'KIRC'
cancerInd <- 2
runType <- 1
argv <- 1
# Store the output in subfolders
resultsFile <- paste(paste(argv, collapse="_"), ".txt", sep="")
constructPath <- function(intermediateFolders, parent=resultsFolder,
file=resultsFile) {
paste(parent, intermediateFolders, file, sep="/")
}
clusteringFile <- constructPath("Clustering")
incompleteFile <- constructPath("Incomplete")
imputedFile <- constructPath("Imputed")
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# Load the clinical data
clinicalData <- loadData("clin")
######################################################################
# Generate the union and intersected data from the original data
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Extract all cases which appear in all of the data types
intersectedData <- columnIntersection(cases)
######################################################################
# Select a subset of features which differ most between cases and
# controls.
featureSubsetIndices <- function(cases, subsetSize=numFeat) {
numViews <- length(cases)
featureSubsetInd <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the t-test p-value for each feature, grouped by cases
# and controls
numFeatures <- nrow(cases[[v]])
pval <- sapply(1:numFeatures,
function(i) t.test(cases[[v]][i, ],
controls[[v]][i, ])$p.value)
# Subset the data keeping the features with the smallest p-values
ind <- order(pval)
featureSubsetInd[[v]] <- ind[1:min(subsetSize, numFeatures)]
}
return(featureSubsetInd)
}
subsetData <- function(data, ind) {
for (v in 1:length(data)) {
data[[v]] <- data[[v]][ind[[v]], ]
}
return(data)
}
unionInd <- featureSubsetIndices(unionData)
unionData <- subsetData(unionData, unionInd)
intersectedInd <- featureSubsetIndices(intersectedData)
intersectedData <- subsetData(intersectedData, intersectedInd)
`######################################################################
# Normalize the features in the data sets.
# Normalization is performed before imputation and we expect that the
# data will still be normalized after imputation (before clustering).
rowStatistics <- function(cases) {
numViews <- length(cases)
rowStats <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the row means and standard deviations
rowMean <- apply(cases[[v]], 1, mean, na.rm=TRUE)
rowSd <- apply(cases[[v]], 1, sd, na.rm=TRUE)
constantInd <- rowSd==0
rowSd[constantInd] <- 1
rowStats[[v]] <- list(mean=rowMean, sd=rowSd, ind=constantInd)
}
return(rowStats)
}
normalizeData <- function(data, stat) {
for (v in 1:length(data)) {
data[[v]] <- (data[[v]] - stat[[v]]$mean) / stat[[v]]$sd
data[[v]] <- data[[v]][!stat[[v]]$ind, ]
}
return(data)
}
unionStat <- rowStatistics(unionData)
unionData <- normalizeData(unionData, unionStat)
intersectedStat <- rowStatistics(intersectedData)
intersectedData <- normalizeData(intersectedData, intersectedStat)
######################################################################
# Eval
}
}
}
}
}
######################################################################
# Load libraries
library(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"evaluate_original_imputation", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
jvmGBLimit <- 8
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 12
numFeat <- 2000
cancer <- 'KIRC'
cancerInd <- 2
runType <- 1
argv <- 1
# Store the output in subfolders
resultsFile <- paste(paste(argv, collapse="_"), ".txt", sep="")
constructPath <- function(intermediateFolders, parent=resultsFolder,
file=resultsFile) {
paste(parent, intermediateFolders, file, sep="/")
}
clusteringFile <- constructPath("Clustering")
incompleteFile <- constructPath("Incomplete")
imputedFile <- constructPath("Imputed")
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# Load the clinical data
clinicalData <- loadData("clin")
######################################################################
# Generate the union and intersected data from the original data
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Extract all cases which appear in all of the data types
intersectedData <- columnIntersection(cases)
######################################################################
# Select a subset of features which differ most between cases and
# controls.
featureSubsetIndices <- function(cases, subsetSize=numFeat) {
numViews <- length(cases)
featureSubsetInd <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the t-test p-value for each feature, grouped by cases
# and controls
numFeatures <- nrow(cases[[v]])
pval <- sapply(1:numFeatures,
function(i) t.test(cases[[v]][i, ],
controls[[v]][i, ])$p.value)
# Subset the data keeping the features with the smallest p-values
ind <- order(pval)
featureSubsetInd[[v]] <- ind[1:min(subsetSize, numFeatures)]
}
return(featureSubsetInd)
}
subsetData <- function(data, ind) {
for (v in 1:length(data)) {
data[[v]] <- data[[v]][ind[[v]], ]
}
return(data)
}
unionInd <- featureSubsetIndices(unionData)
unionData <- subsetData(unionData, unionInd)
intersectedInd <- featureSubsetIndices(intersectedData)
intersectedData <- subsetData(intersectedData, intersectedInd)
`######################################################################
######################################################################
# Normalize the features in the data sets.
# Normalization is performed before imputation and we expect that the
# data will still be normalized after imputation (before clustering).
rowStatistics <- function(cases) {
numViews <- length(cases)
rowStats <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the row means and standard deviations
rowMean <- apply(cases[[v]], 1, mean, na.rm=TRUE)
rowSd <- apply(cases[[v]], 1, sd, na.rm=TRUE)
constantInd <- rowSd==0
rowSd[constantInd] <- 1
rowStats[[v]] <- list(mean=rowMean, sd=rowSd, ind=constantInd)
}
return(rowStats)
}
normalizeData <- function(data, stat) {
for (v in 1:length(data)) {
data[[v]] <- (data[[v]] - stat[[v]]$mean) / stat[[v]]$sd
data[[v]] <- data[[v]][!stat[[v]]$ind, ]
}
return(data)
}
unionStat <- rowStatistics(unionData)
25*.85
38*.85
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'NM_2015_ben', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Pval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'NM_2015_ben', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Pval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Pval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
# Load libraries
# library(dplyr)
# library(reshape2)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
impute <- loadResults("evaluate_imputation", "imputation.txt",
imputeCols)
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols[-3])
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_FeaturesPval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
######################################################################
# Load libraries
# library(dplyr)
# library(reshape2)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Pval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_Two_Thousand_Features_Pval", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
