clinicalData$days_to_death <- as.numeric(clinicalData$days_to_death)
clinicalData$days_to_last_followup <- as.numeric(clinicalData$days_to_last_followup)
###### subset data
for (i in 1:numViews) {
temp.completeData <- completeData[[i]]
temp.completeData <- temp.completeData[,completeInd]
temp.2.completeData <- temp.completeData[rowSums(temp.completeData) != 0,]
completeData[[i]] <- temp.2.completeData
}
# run combat on methylation
temp.dat <- completeData[[1]]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.dat, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
completeData[[1]] <- temp_combat
# Generate an incomplete data set by extracting all cases which appear
# in all of the data types and removing some of their samples
set.seed(seed)
incompleteIntersection <- generateIncompleteIntersectionCombat(cases)
incompleteData <- incompleteIntersection$incomplete
removedData <- incompleteIntersection$removed
# Extract all cases which appear in all of the data types in the
# incomplete data
# Remove samples from the data matrix which only contain NA values.
removeNASamples <- function(data) {
missingInd <- apply(data, 2, function(x) all(is.na(x)))
data <- data[, !missingInd]
return(data)
}
removedNAData <- lapply(incompleteData, removeNASamples)
intersectedData <- columnIntersection(removedNAData)
######################################################################
# Select a subset of features which differ most between cases and
# controls.
featureSubsetIndices <- function(cases, subsetSize=numFeat) {
numViews <- length(cases)
featureSubsetInd <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the t-test p-value for each feature, grouped by cases
# and controls
numFeatures <- nrow(cases[[v]])
pval <- sapply(1:numFeatures,
function(i) t.test(cases[[v]][i, ],
controls[[v]][i, ])$p.value)
# Subset the data keeping the features with the smallest p-values
ind <- order(pval)
featureSubsetInd[[v]] <- ind[1:min(subsetSize, numFeatures)]
}
return(featureSubsetInd)
}
subsetData <- function(data, ind) {
for (v in 1:length(data)) {
data[[v]] <- data[[v]][ind[[v]], ]
}
return(data)
}
completeInd <- featureSubsetIndices(completeData)
completeData <- subsetData(completeData, completeInd)
incompleteInd <- featureSubsetIndices(incompleteData)
incompleteData <- subsetData(incompleteData, incompleteInd)
removedData <- subsetData(removedData, incompleteInd)
intersectedInd <- featureSubsetIndices(intersectedData)
intersectedData <- subsetData(intersectedData, intersectedInd)
# ######################################################################
# # Normalize the features in the data sets.
# # Normalization is performed before imputation and we expect that the
# # data will still be normalized after imputation (before clustering).
#
rowStatistics <- function(cases) {
numViews <- length(cases)
rowStats <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the row means and standard deviations
rowMean <- apply(cases[[v]], 1, mean, na.rm=TRUE)
rowSd <- apply(cases[[v]], 1, sd, na.rm=TRUE)
constantInd <- rowSd==0
rowSd[constantInd] <- 1
rowStats[[v]] <- list(mean=rowMean, sd=rowSd, ind=constantInd)
}
return(rowStats)
}
normalizeData <- function(data, stat) {
for (v in 1:length(data)) {
data[[v]] <- (data[[v]] - stat[[v]]$mean) / stat[[v]]$sd
data[[v]] <- data[[v]][!stat[[v]]$ind, ]
}
return(data)
}
completeStat <- rowStatistics(completeData)
completeData <- normalizeData(completeData, completeStat)
incompleteStat <- rowStatistics(incompleteData)
incompleteData <- normalizeData(incompleteData, incompleteStat)
removedData <- normalizeData(removedData, incompleteStat)
intersectedStat <- rowStatistics(intersectedData)
intersectedData <- normalizeData(intersectedData, intersectedStat)
#######
#########################################################################################################
# initiate folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
completeFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"cluster_complete_data", 'Results', 'Labels',sep="/")
imputeOrigFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"evaluate_original_imputation/Results/Clustering", sep="/")
similarityOrigFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"evaluate_original_similarity/Results/Similarity", sep="/")
imputeFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"evaluate_imputation/Results/Clustering", sep="/")
similarityFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"evaluate_similarity/Results/Similarity", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Compare", sep="/")
idsFolder <- paste(testFolder, "ids", sep="/")
########
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
dataTypes <- c("methyl", "mirna", "mrna")
combat_complete_ids <- combat_ids[[1]]
combat_union_ids <- combat_ids[[2]]
combat_com5_hier <- as.factor(t(read.table(paste0(completeFolder, '/1_1.txt'))))
combat_com5_iclust <- as.factor(t(read.table(paste0(completeFolder, '/1_2.txt'))))
combat_com5_snf <- as.factor(t(read.table(paste0(completeFolder, '/1_3.txt'))))
combat_com4_hier <- as.factor(t(read.table(paste0(completeFolder, '/2_1.txt'))))
combat_com4_iclust <- as.factor(t(read.table(paste0(completeFolder, '/2_2.txt'))))
combat_com4_snf <- as.factor(t(read.table(paste0(completeFolder, '/2_3.txt'))))
combat_com3_hier <- as.factor(t(read.table(paste0(completeFolder, '/3_1.txt'))))
combat_com3_iclust <- as.factor(t(read.table(paste0(completeFolder, '/3_2.txt'))))
combat_com3_snf <- as.factor(t(read.table(paste0(completeFolder, '/3_3.txt'))))
summary(combat_com5_hier)
summary(combat_com5_hier)
summary(combat_com5_iclust)
summary(combat_com5_snf)
summary(combat_com4_hier)
summary(combat_com4_iclust)
summary(combat_com4_snf)
summary(combat_com3_hier)
summary(combat_com3_iclust)
summary(combat_com3_snf)
summary(combat_com5_hier)
summary(combat_com5_iclust)
summary(combat_com5_snf)
summary(combat_com4_hier)
summary(combat_com4_hier)
summary(combat_com4_iclust)
summary(combat_com4_snf)
summary(combat_com3_hier)
summary(combat_com3_iclust)
51summary(combat_com3_snf)
51summary(combat_com3_snf)
summary(combat_com3_snf)
library(ggplot2)
library(reshape2)
library(dplyr)
library(survival)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
data_folder <- paste(project_folder,'Data', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
all_labels <- read.csv(paste0(results_folder, '/all_lables.csv'))
intersection <- read.csv(paste0(results_folder, '/intersection_clusters.csv'))
union <- read.csv(paste0(results_folder, '/union_clusters.csv'))
##################################################################################################
# clean intersection and union
# first remove the _clustersiez from cancer column
intersection$cancer <- gsub('_3', '', intersection$cancer)
intersection$cancer <- gsub('_4', '', intersection$cancer)
union$cancer <- gsub('_3', '', union$cancer)
union$cancer <- gsub('_4', '', union$cancer)
# merge cancer column onto method column
intersection$method <- paste(intersection$cancer, 'com', intersection$method, sep = '_')
union$method <- paste(union$cancer, 'union', union$method, sep = '_')
# add column for union and intersection
intersection$type <- 'intersection'
union$type <- 'union'
# make method column lower case
intersection$method <- tolower(intersection$method)
union$method <- tolower(union$method)
# replace '.' with "_"
intersection$method <- gsub('.', '_', intersection$method, fixed = TRUE)
union$method <- gsub('.', '_', union$method, fixed = TRUE)
# replace "hierarchical" and "icluster" with "hier" and "iclust"
intersection$method <- gsub('icluster', 'iclust', intersection$method)
union$method <- gsub('icluster', 'iclust', union$method)
intersection$method <- gsub('hierarchical', 'hier', intersection$method)
union$method <- gsub('hierarchical', 'hier', union$method)
intersection$method <- gsub('regres', 'reg', intersection$method)
union$method <- gsub('regres', 'reg', union$method)
intersection$method <- gsub('median', 'med', intersection$method)
union$method <- gsub('median', 'med', union$method)
# paste cluster size at end of method
intersection$method <- paste(intersection$method, intersection$clusters, sep = '_')
union$method <- paste(union$method, union$clusters, sep = '_')
# row bind intersection and union. First need to create NA columns for acc and nmi in union and drop totals
union$acc <- NA
union$nmi <- NA
union$total <- NULL
intersection$total <- NULL
intersection$acc_nmi <- NULL
intersection$pval_ci <- NULL
scores <- rbind(intersection, union)
# remove combat from analysis
scores <- scores[!grepl('combat|Combat', scores$cancer),]
###################################################################################################
# create variables for percent
all_labels$lab1_percent <- round((all_labels$label1/all_labels$sum_of_samples)*100,2)
all_labels$lab2_percent <- round((all_labels$label2/all_labels$sum_of_samples)*100,2)
all_labels$lab3_percent <- round((all_labels$label3/all_labels$sum_of_samples)*100,2)
all_labels$lab4_percent <- round((all_labels$label4/all_labels$sum_of_samples)*100,2)
all_labels$lab5_percent <- round((all_labels$label5/all_labels$sum_of_samples)*100,2)
# add cluster size to end of methods
all_labels$method <- paste(all_labels$method, all_labels$clusters, sep = '_')
# remove duplicates
all_labels <- all_labels[!duplicated((all_labels$method)),]
# add in column to indicate if it is complete data
all_labels$data <- ifelse(nchar(all_labels$method) < 18, 'complete', 'not_complete')
#####
# group by method and cluster numbers and get counts for label percent under 1%
percent_1 <- all_labels %>%
group_by(method, clusters, data) %>%
summarise(cluster1_under1 = sum(lab1_percent <= 1),
cluster2_under1 = sum(lab2_percent <= 1),
cluster3_under1 = sum(lab3_percent <= 1),
cluster4_under1 = sum(lab4_percent <= 1),
cluster5_under1 = sum(lab5_percent <= 1))
# left join results from intersection and union onto
percent_1_scores <- left_join(percent_1, scores)
# fill data= 'notcomplete' with type
notcomplete_index <- percent_1_scores$data == 'not_complete'
percent_1_scores$data[notcomplete_index] <- percent_1_scores$type[notcomplete_index]
# add cancer in column
percent_1_scores$cancer <- ifelse(grepl('brca', percent_1_scores$method), 'BRCA',
ifelse(grepl('kirc', percent_1_scores$method), 'KIRC',
ifelse(grepl('lihc', percent_1_scores$method), 'LIHC',
ifelse(grepl('luad', percent_1_scores$method), 'LUAD',
ifelse(grepl('lusc', percent_1_scores$method),
'LUSC', percent_1_scores$cancer)))))
# group by cancer, get avg acc, nmi, pval, ci and sum of cluster1,2,3,4
group_cluster <- percent_1_scores %>%
group_by(cancer, data, clusters) %>%
summarise(total_counts1 = sum(cluster1_under1, na.rm = T),
total_counts2 = sum(cluster2_under1, na.rm = T),
total_counts3 = sum(cluster3_under1, na.rm = T),
total_counts4 = sum(cluster4_under1, na.rm = T),
total_counts5 = sum(cluster5_under1, na.rm = T))
# add up indicators for all clusters to get a total for under the threshold of x%
group_cluster$total <- group_cluster$total_counts1 + group_cluster$total_counts2 + group_cluster$total_counts3 +
+ group_cluster$total_counts4 + group_cluster$total_counts5
View(group_cluster)
library(ggplot2)
library(reshape2)
library(dplyr)
library(survival)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
data_folder <- paste(project_folder,'Data', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
all_labels <- read.csv(paste0(results_folder, '/all_lables.csv'))
intersection <- read.csv(paste0(results_folder, '/intersection_clusters.csv'))
union <- read.csv(paste0(results_folder, '/union_clusters.csv'))
View(all_labels)
# first remove the _clustersiez from cancer column
intersection$cancer <- gsub('_3', '', intersection$cancer)
intersection$cancer <- gsub('_4', '', intersection$cancer)
union$cancer <- gsub('_3', '', union$cancer)
union$cancer <- gsub('_4', '', union$cancer)
# merge cancer column onto method column
intersection$method <- paste(intersection$cancer, 'com', intersection$method, sep = '_')
union$method <- paste(union$cancer, 'union', union$method, sep = '_')
# add column for union and intersection
intersection$type <- 'intersection'
union$type <- 'union'
# make method column lower case
intersection$method <- tolower(intersection$method)
union$method <- tolower(union$method)
# replace '.' with "_"
intersection$method <- gsub('.', '_', intersection$method, fixed = TRUE)
union$method <- gsub('.', '_', union$method, fixed = TRUE)
# replace "hierarchical" and "icluster" with "hier" and "iclust"
intersection$method <- gsub('icluster', 'iclust', intersection$method)
union$method <- gsub('icluster', 'iclust', union$method)
intersection$method <- gsub('hierarchical', 'hier', intersection$method)
union$method <- gsub('hierarchical', 'hier', union$method)
intersection$method <- gsub('regres', 'reg', intersection$method)
union$method <- gsub('regres', 'reg', union$method)
intersection$method <- gsub('median', 'med', intersection$method)
union$method <- gsub('median', 'med', union$method)
# paste cluster size at end of method
intersection$method <- paste(intersection$method, intersection$clusters, sep = '_')
union$method <- paste(union$method, union$clusters, sep = '_')
union$acc <- NA
union$nmi <- NA
union$total <- NULL
intersection$total <- NULL
intersection$acc_nmi <- NULL
intersection$pval_ci <- NULL
scores <- rbind(intersection, union)
# remove combat from analysis
scores <- scores[!grepl('combat|Combat', scores$cancer),]
all_labels$lab1_percent <- round((all_labels$label1/all_labels$sum_of_samples)*100,2)
all_labels$lab2_percent <- round((all_labels$label2/all_labels$sum_of_samples)*100,2)
all_labels$lab3_percent <- round((all_labels$label3/all_labels$sum_of_samples)*100,2)
all_labels$lab4_percent <- round((all_labels$label4/all_labels$sum_of_samples)*100,2)
all_labels$lab5_percent <- round((all_labels$label5/all_labels$sum_of_samples)*100,2)
# add cluster size to end of methods
all_labels$method <- paste(all_labels$method, all_labels$clusters, sep = '_')
# remove duplicates
all_labels <- all_labels[!duplicated((all_labels$method)),]
# add in column to indicate if it is complete data
all_labels$data <- ifelse(nchar(all_labels$method) < 18, 'complete', 'not_complete')
View(all_labels)
percent_1 <- all_labels %>%
group_by(method, clusters, data) %>%
summarise(cluster1_under1 = sum(lab1_percent <= 1),
cluster2_under1 = sum(lab2_percent <= 1),
cluster3_under1 = sum(lab3_percent <= 1),
cluster4_under1 = sum(lab4_percent <= 1),
cluster5_under1 = sum(lab5_percent <= 1))
View(percent_1)
library(ggplot2)
library(reshape2)
library(dplyr)
library(survival)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
data_folder <- paste(project_folder,'Data', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
all_labels <- read.csv(paste0(results_folder, '/all_lables.csv'))
intersection <- read.csv(paste0(results_folder, '/intersection_clusters.csv'))
union <- read.csv(paste0(results_folder, '/union_clusters.csv'))
##################################################################################################
# clean intersection and union
# first remove the _clustersiez from cancer column
intersection$cancer <- gsub('_3', '', intersection$cancer)
intersection$cancer <- gsub('_4', '', intersection$cancer)
union$cancer <- gsub('_3', '', union$cancer)
union$cancer <- gsub('_4', '', union$cancer)
# merge cancer column onto method column
intersection$method <- paste(intersection$cancer, 'com', intersection$method, sep = '_')
union$method <- paste(union$cancer, 'union', union$method, sep = '_')
# add column for union and intersection
intersection$type <- 'intersection'
union$type <- 'union'
# make method column lower case
intersection$method <- tolower(intersection$method)
union$method <- tolower(union$method)
# replace '.' with "_"
intersection$method <- gsub('.', '_', intersection$method, fixed = TRUE)
union$method <- gsub('.', '_', union$method, fixed = TRUE)
# replace "hierarchical" and "icluster" with "hier" and "iclust"
intersection$method <- gsub('icluster', 'iclust', intersection$method)
union$method <- gsub('icluster', 'iclust', union$method)
intersection$method <- gsub('hierarchical', 'hier', intersection$method)
union$method <- gsub('hierarchical', 'hier', union$method)
intersection$method <- gsub('regres', 'reg', intersection$method)
union$method <- gsub('regres', 'reg', union$method)
intersection$method <- gsub('median', 'med', intersection$method)
union$method <- gsub('median', 'med', union$method)
# paste cluster size at end of method
intersection$method <- paste(intersection$method, intersection$clusters, sep = '_')
union$method <- paste(union$method, union$clusters, sep = '_')
# row bind intersection and union. First need to create NA columns for acc and nmi in union and drop totals
union$acc <- NA
union$nmi <- NA
union$total <- NULL
intersection$total <- NULL
intersection$acc_nmi <- NULL
intersection$pval_ci <- NULL
scores <- rbind(intersection, union)
# remove combat from analysis
scores <- scores[!grepl('combat|Combat', scores$cancer),]
all_labels$lab1_percent <- round((all_labels$label1/all_labels$sum_of_samples)*100,2)
all_labels$lab2_percent <- round((all_labels$label2/all_labels$sum_of_samples)*100,2)
all_labels$lab3_percent <- round((all_labels$label3/all_labels$sum_of_samples)*100,2)
all_labels$lab4_percent <- round((all_labels$label4/all_labels$sum_of_samples)*100,2)
all_labels$lab5_percent <- round((all_labels$label5/all_labels$sum_of_samples)*100,2)
# add cluster size to end of methods
all_labels$method <- paste(all_labels$method, all_labels$clusters, sep = '_')
# remove duplicates
all_labels <- all_labels[!duplicated((all_labels$method)),]
# add in column to indicate if it is complete data
all_labels$data <- ifelse(nchar(all_labels$method) < 18, 'complete', 'not_complete')
View(all_labels)
percent_1 <- all_labels %>%
group_by(method, clusters, data) %>%
summarise(cluster1_under1 = sum(lab1_percent <= 1),
cluster2_under1 = sum(lab2_percent <= 1),
cluster3_under1 = sum(lab3_percent <= 1),
cluster4_under1 = sum(lab4_percent <= 1),
cluster5_under1 = sum(lab5_percent <= 1))
View(percent_1)
percent_5 <- all_labels %>%
group_by(method, clusters, data) %>%
summarise(cluster1_under5 = sum(lab1_percent <= 5),
cluster2_under5 = sum(lab2_percent <= 5),
cluster3_under5 = sum(lab3_percent <= 5),
cluster4_under5 = sum(lab4_percent <= 5),
cluster5_under5 = sum(lab5_percent <= 5))
View(percent_5)
percent_10 <- all_labels %>%
group_by(method, clusters, data) %>%
summarise(cluster1_under10 = sum(lab1_percent <= 10),
cluster2_under10 = sum(lab2_percent <= 10),
cluster3_under10 = sum(lab3_percent <= 10),
cluster4_under10 = sum(lab4_percent <= 10),
cluster5_under10 = sum(lab5_percent <= 10))
View(percent_10)
percent_10_scores <- left_join(percent_10, scores)
View(percent_10)
# fill data= 'notcomplete' with type
notcomplete_index <- percent_10_scores$data == 'not_complete'
percent_10_scores$data[notcomplete_index] <- percent_10_scores$type[notcomplete_index]
# add cancer in column
percent_10_scores$cancer <- ifelse(grepl('brca', percent_10_scores$method), 'BRCA',
ifelse(grepl('kirc', percent_10_scores$method), 'KIRC',
ifelse(grepl('lihc', percent_10_scores$method), 'LIHC',
ifelse(grepl('luad', percent_10_scores$method), 'LUAD',
ifelse(grepl('lusc', percent_10_scores$method),
'LUSC', percent_10_scores$cancer)))))
# group by cancer, get avg acc, nmi, pval, ci and sum of cluster10,2,3,4
group_cluster <- percent_10_scores %>%
group_by(cancer, data, clusters) %>%
summarise(total_counts1 = sum(cluster1_under10, na.rm = T),
total_counts2 = sum(cluster2_under10, na.rm = T),
total_counts3 = sum(cluster3_under10, na.rm = T),
total_counts4 = sum(cluster4_under10, na.rm = T),
total_counts5 = sum(cluster5_under10, na.rm = T))
# add up indicators for all clusters to get a total for under the threshold of x%
group_cluster$total <- group_cluster$total_counts1 + group_cluster$total_counts2 + group_cluster$total_counts3 +
+ group_cluster$total_counts4 + group_cluster$total_counts5
View(group_cluster)
setwd(paste(codeFolder, "Impute", sep="/"))
source("checkData.R")
source("ginv.R")
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"evaluate_imputation", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
######################################################################
setwd(paste(codeFolder, "Impute", sep="/"))
workingDirectory <- getwd()
codeFolder <- paste(projectFolder, "Code", sep="/")
# Imputation code provided to me
setwd(paste(codeFolder, "Impute", sep="/"))
source("checkData.R")
source("ginv.R")
source("llsImpute.R")
# Code I wrote for the tests
setwd(paste(codeFolder, "Tests", sep="/"))
source("affinityMatrix.R")
source("calAcc.R")
# source("dominateset.R")
source("evaluateClustering.R")
source("evaluateClusteringCensor.R")
source("evaluateClusteringInt.R")
source("evaluateClusteringLab.R")
source("evaluateImputation.R")
source("evaluateSimilarity.R")
source("evaluateSimilarityInt.R")
source("evaluateSimilarityLab.R")
source("evaluateSimilarityCustom.R")
source("evaluateSurvival.R")
source("evaluateSurvivalCensor.R")
source("generateIncompleteIntersection.R")
source("generateIncompleteIntersectionPercent.R")
source("generateIncompleteIntersectionCombat.R")
source("hierarchicalClustering.R")
source("hierarchicalClusteringType.R")
source("iClusterClustering.R")
source("iClusterClusteringType.R")
source("imputationErrors.R")
source("knnImputation.R")
source("llsImputation.R")
# Note: lsaImputation depends on previously initialized variables:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
source("lsaImputation.R")
source("medianSimilarity.R")
source("randomImputation.R")
source("regressionSimilarity.R")
source("sampleIntersection.R")
source("sampleUnion.R")
source("selfSimilarity.R")
source("SNFClustering.R")
source("SNFClusteringType.R")
source("splitConcatenatedData.R")
source("standardNormalization.R")
source("writeResults.R")
setwd(workingDirectory)
