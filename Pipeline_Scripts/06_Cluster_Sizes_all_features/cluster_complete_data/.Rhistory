homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
completeFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"cluster_complete_data", 'Results', 'Labels',sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Compare", sep="/")
testFolderAll <- paste(projectFolder, "Scripts",
"06_Cluster_Compare_all_features", sep="/")
idsFolder <- paste(testFolder, "ids", sep="/")
# Get ids from data for each cancer
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
dataTypes <- c("methyl", "mirna", "mrna")
# Load the original data
loadIDs <- function(cancer, combat = FALSE){
if (cancer == "KIRC" & combat) {
#####################################################################
# Load in raw clinical data for kirc
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
extractRelevantColumns <- function(data) {
# List of features used for survival analysis
features <- c("admin.batch_number",
"patient.bcr_patient_barcode",
"patient.bcr_patient_uuid",
"patient.days_to_death",
"patient.days_to_last_followup",
"patient.days_to_last_known_alive",
"patient.vital_status",
"patient.gender")
patientFeatures <- paste("patient", features, sep=".")
# Add missing features to the data
missingFeaturesInd <- !(features %in% colnames(data))
data[features[missingFeaturesInd]] <- NA
# Extract and rename the relevant columns
data <- data[features]
colnames(data) <- features
return(data)
}
loadClinData <- function(cancer = 'KIRC') {
#   processingResult <- dataFolder
fileSuffix <- "clinical.txt"
# Load the data
data <- NULL
fileName <- paste(cancer, fileSuffix, sep="_")
filePath <- paste(dataFolder,fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Transpose the data
data <- transposeDataFrame(data)
}
return(data)
}
# Load clinical data with batch number
cancer <- 'KIRC'
# Process the clinical data
clinicalData <- loadClinData(cancer)
clinicalData <- extractRelevantColumns(clinicalData)
## remove patient from column names
features <- colnames(clinicalData)
split <- strsplit(features, '.', fixed = TRUE)
keepSplit <- lapply(split, function(x) x[length(x)])
features <- unlist(keepSplit)
colnames(clinicalData) <- features
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######################################################################
# Load the original data
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
#####################################################################
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
#####################################################################
# subset clinical data by ids in cases
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
transformUnionId <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
return(x)
}
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
for (i in 1:3) {
temp.data  <- unionData[[i]]
temp.names <- transformUnionId(colnames(temp.data))
colnames(temp.data) <- temp.names
temp.data <- temp.data[, !duplicated(colnames(temp.data))]
unionData[[i]] <- temp.data
}
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
unionInd <- match(clinicalIDs, unionIDs)
clinicalData$days_to_death <- as.numeric(clinicalData$days_to_death)
clinicalData$days_to_last_followup <- as.numeric(clinicalData$days_to_last_followup)
###### Run combat function
for (i in 1:numViews) {
temp.unionData <- unionData[[i]]
temp.unionData <- temp.unionData[,unionInd]
temp.2.unionData <- temp.unionData[rowSums(temp.unionData, na.rm = T) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.unionData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
unionData[[i]] <- temp_combat
}
unionIds <- colnames(unionData[[1]])
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(completeIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
completeInd <- match(clinicalIDs, completeIDs)
###### Run combat function
for (i in 1:numViews) {
temp.completeData <- completeData[[i]]
temp.completeData <- temp.completeData[,completeInd]
temp.2.completeData <- temp.completeData[rowSums(temp.completeData) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.completeData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
completeData[[i]] <- temp_combat
}
completeIds <- transformUnionId(colnames(completeData[[1]]) )
return(list(first = completeIds, second = unionIds))
} else {
dataTypes <- c("methyl", "mirna", "mrna")
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# extract all cases which appear in all of the data types (intersection)
completeData <- columnIntersection(cases) # now ncol in each matrix is the same and identical to each other.
# subset the clinical data so that it corresponds to individuals in the complete data
completeIds <- colnames(completeData[[1]])
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIds <- colnames(unionData[[1]])
return(list(first = completeIds, second = unionIds))
}
}
# Lod cancer ids
brca_ids <-loadIDs(cancer = 'BRCA')
kirc_ids <-loadIDs(cancer = 'KIRC')
lihc_ids <-loadIDs(cancer = 'LIHC')
luad_ids <-loadIDs(cancer = 'LUAD')
combat_ids <- loadIDs(cancer = 'KIRC', combat = TRUE)
##########################################################################################################
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
completeFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes",
"cluster_complete_data", 'Results', 'Labels',sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Compare", sep="/")
testFolderAll <- paste(projectFolder, "Scripts",
"06_Cluster_Compare_all_features", sep="/")
idsFolder <- paste(testFolder, "ids", sep="/")
#########################################################################################################
# Get ids from data for each cancer
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
dataTypes <- c("methyl", "mirna", "mrna")
# Load the original data
loadIDs <- function(cancer, combat = FALSE){
if (cancer == "KIRC" & combat) {
#####################################################################
# Load in raw clinical data for kirc
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
extractRelevantColumns <- function(data) {
# List of features used for survival analysis
features <- c("admin.batch_number",
"patient.bcr_patient_barcode",
"patient.bcr_patient_uuid",
"patient.days_to_death",
"patient.days_to_last_followup",
"patient.days_to_last_known_alive",
"patient.vital_status",
"patient.gender")
patientFeatures <- paste("patient", features, sep=".")
# Add missing features to the data
missingFeaturesInd <- !(features %in% colnames(data))
data[features[missingFeaturesInd]] <- NA
# Extract and rename the relevant columns
data <- data[features]
colnames(data) <- features
return(data)
}
loadClinData <- function(cancer = 'KIRC') {
#   processingResult <- dataFolder
fileSuffix <- "clinical.txt"
# Load the data
data <- NULL
fileName <- paste(cancer, fileSuffix, sep="_")
filePath <- paste(dataFolder,fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Transpose the data
data <- transposeDataFrame(data)
}
return(data)
}
# Load clinical data with batch number
cancer <- 'KIRC'
# Process the clinical data
clinicalData <- loadClinData(cancer)
clinicalData <- extractRelevantColumns(clinicalData)
## remove patient from column names
features <- colnames(clinicalData)
split <- strsplit(features, '.', fixed = TRUE)
keepSplit <- lapply(split, function(x) x[length(x)])
features <- unlist(keepSplit)
colnames(clinicalData) <- features
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######################################################################
# Load the original data
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
#####################################################################
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
#####################################################################
# subset clinical data by ids in cases
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
transformUnionId <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
return(x)
}
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
for (i in 1:3) {
temp.data  <- unionData[[i]]
temp.names <- transformUnionId(colnames(temp.data))
colnames(temp.data) <- temp.names
temp.data <- temp.data[, !duplicated(colnames(temp.data))]
unionData[[i]] <- temp.data
}
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
unionInd <- match(clinicalIDs, unionIDs)
clinicalData$days_to_death <- as.numeric(clinicalData$days_to_death)
clinicalData$days_to_last_followup <- as.numeric(clinicalData$days_to_last_followup)
###### Run combat function
for (i in 1:numViews) {
temp.unionData <- unionData[[i]]
temp.unionData <- temp.unionData[,unionInd]
temp.2.unionData <- temp.unionData[rowSums(temp.unionData, na.rm = T) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.unionData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
unionData[[i]] <- temp_combat
}
unionIds <- colnames(unionData[[1]])
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(completeIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
completeInd <- match(clinicalIDs, completeIDs)
###### Run combat function
for (i in 1:numViews) {
temp.completeData <- completeData[[i]]
temp.completeData <- temp.completeData[,completeInd]
temp.2.completeData <- temp.completeData[rowSums(temp.completeData) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.completeData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
completeData[[i]] <- temp_combat
}
completeIds <- transformUnionId(colnames(completeData[[1]]) )
return(list(first = completeIds, second = unionIds))
} else {
dataTypes <- c("methyl", "mirna", "mrna")
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# extract all cases which appear in all of the data types (intersection)
completeData <- columnIntersection(cases) # now ncol in each matrix is the same and identical to each other.
# subset the clinical data so that it corresponds to individuals in the complete data
completeIds <- colnames(completeData[[1]])
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIds <- colnames(unionData[[1]])
return(list(first = completeIds, second = unionIds))
}
}
# Lod cancer ids
brca_ids <-loadIDs(cancer = 'BRCA')
kirc_ids <-loadIDs(cancer = 'KIRC')
lihc_ids <-loadIDs(cancer = 'LIHC')
luad_ids <-loadIDs(cancer = 'LUAD')
combat_ids <- loadIDs(cancer = 'KIRC', combat = TRUE)
##########################################################################################################
# BR
brca_complete_ids <- brca_ids[[1]]
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
testFolderAll <- paste(projectFolder, "Scripts",
"06_Cluster_Compare_all_features", sep="/")
idsFolder <- paste(testFolder, "ids", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Compare_all_features", sep="/")
brca_cluster5 <- read.table(paste0(testFolder, '/1_1_1.txt'))
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Lables/1_1_1.txt'))
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Size_all_features", sep="/")
#########################################################################################################
# BRCA
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes_all_features", sep="/")
#########################################################################################################
# BRCA
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes_all_features/cluster_complete_data", sep="/")
#########################################################################################################
# BRCA
brca_cluster5 <- read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))
View(brca_cluster5)
brca_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))))
brca_cluster5
brca_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_2_1.txt'))))
lihc_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/3_1_1.txt'))))
lihc_cluster5
summary(lihc_cluster5)
summary(brca_cluster5)
library(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
library(dplyr)
library(sva)
#########################################################################################################
# initiate folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Sizes_all_features/cluster_complete_data", sep="/")
#########################################################################################################
# BRCA
brca_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_1_1.txt'))))
brca_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_2_1.txt'))))
brca_cluster3 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_3_1.txt'))))
brca_cluster2 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/1_4_1.txt'))))
summary(brca_cluster5)
summary(brca_cluster4)
summary(brca_cluster3)
summary(brca_cluster2)
summary(kirc_cluster5)
kirc_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/2_1_1.txt'))))
kirc_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/2_2_1.txt'))))
kirc_cluster3 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/2_3_1.txt'))))
kirc_cluster2 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/2_4_1.txt'))))
summary(kirc_cluster5)
summary(kirc_cluster4)
summary(kirc_cluster3)
summary(kirc_cluster2)
lihc_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/3_1_1.txt'))))
lihc_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/3_2_1.txt'))))
lihc_cluster3 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/3_3_1.txt'))))
lihc_cluster2 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/3_4_1.txt'))))
summary(lihc_cluster5)
summary(lihc_cluster4)
summary(lihc_cluster3)
summary(lihc_cluster2)
luad_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/4_1_1.txt'))))
luad_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/4_2_1.txt'))))
luad_cluster3 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/4_3_1.txt'))))
luad_cluster2 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/4_4_1.txt'))))
summary(luad_cluster5)
summary(luad_cluster4)
summary(luad_cluster3)
summary(luad_cluster2)
lusc_cluster5 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/5_1_1.txt'))))
lusc_cluster4 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/5_2_1.txt'))))
lusc_cluster3 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/5_3_1.txt'))))
lusc_cluster2 <- as.factor(t(read.table(paste0(testFolder, '/Results/Labels/5_4_1.txt'))))
summary(lusc_cluster5)
summary(lusc_cluster4)
summary(lusc_cluster3)
summary(lusc_cluster2)
