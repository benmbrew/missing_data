"gdna", "protein", "codon_72", "pin_3", "mdm2","date", "gender")
clin$id
id_malkin <- clin$id
ids[[1]] %in% id_malkin
clin[ids[[1]] %in% id_malkin]
clin[ids[[1]] %in% id_malkin,]
clin_overlap <- clin[ids[[1]] %in% clin$id,]
clin_overlap <- clin[ids[[1]] %in% clin$id,]
clin_overlap
str(clin_overlap)
group_by(cancer)
group_by(clin_overlap$cancer)
cancers <- clin_overlap %>%
group_by(as.factor(cancer)) %>%
summarise(counts = n())
cancers
View(cancers)
View(cancers)
id <- ids[[1]]
clin_overlap <- clin[id %in% clin$id,]
cancers <- clin_overlap %>%
group_by(as.factor(cancer)) %>%
summarise(counts = n())
View(methyl)
View(methyl)
id_methyl <- methyl[1, ]
id_methyl
str(id_methyl)
id_methyl <- as.chracter(methyl[1, ])
id_methyl <- as.character(methyl[1, ])
id_methyl
methyl_overlap <- id[id_methyl %in% id]
id[id_methyl %in% id]
id
id_methyl %in% id
id %in% id_methyl
methyl_overlap <- id[id %in% id_methyl]
methyl_overlap
# (ACCearly+CPC+RMS vs the rest of the mutants) (UseLMM)
# this script is for reading in raw methylation files.
setwd('/home/benbrew/Documents/LFS/Data/')
library(dplyr)
if("raw_methylation.RData" %in% dir()){
load("raw_methylation.RData")
}else{
# Load libraries
# Initialize folders
home_folder <- '/home/benbrew/Documents'
project_folder <- paste(home_folder, 'LFS', sep = '/')
data_folder <- paste(project_folder, 'Data', sep = '/')
methyl_data <- paste(data_folder, 'methyl_files/', sep = '/')
data_name <- 'Chr'
# Read in Nardine's methylation data and clinical data
methyl <- read.table(paste(data_folder,'methyl.txt', sep = '/'))
clin <- read.csv(paste(data_folder, 'clin_all.csv', sep = '/'), header = FALSE)
methyl_17 <- read.csv(paste(data_folder, 'methyl_17.csv', sep = '/'), header = TRUE)
num_sets <- 23
dat <-  vector('list', num_sets)
# read in raw methylation files.
for(i in (1:num_sets)[-13]){
dat[[i]] <- read.delim(paste(methyl_data, data_name, i, '.txt', sep = ''))
}
# save Rdata file
setwd('/home/benbrew/Documents/LFS/Data')
save.image('raw_methylation.RData')
}
# clean clinical data
# plot cancer age variation
# subset for tp53 mutants
colnames(clin) <- c("id", "tp53", "cancer", "cancer_indicator", "age_of_onset",
"gdna", "protein", "codon_72", "pin_3", "mdm2","date", "gender")
rm(temp1)
temp < dat[[1]]
temp <- dat[[1]]
View(temp)
is.na(temp)
is.na(temp$X)
temp$cg171563
temp2 <- dat[[2]]
temp2
temp2$cg070822
temp3 <- dat[[3]]
temp3
temp3$cg216123
temp4 <- dat[[4]]
temp4
temp4$ch.498041
temp4$ch.4.98041
temp5 <- dat[[5]]
temp6 <-dat[[6]]
temp5
temp6
temp7 <- dat[7]
temp7 <- dat[[7]]
temp7
temp8 <- dat[[8]]
temp9 <- dat[[9]]
temp9
temp8
temp9
temp9$ch.9.991104
temp10 <- dat[[10]]
temp10
temp11 <- dat[[1]]
temp11 <- dat[[11]]
temp11
temp11$X
temp11$X.1
temp12 <- dat[[12]]
temp12
temp13
dat[[13]]
temp14 <- dat[[14]]
temp14
temp14$ch.14.9838079
temp15 <- dat[[15]]
temp15
temp16 <- dat[[16]]
temp16
temp17 <- dat[[17]]
temp17
temp18 <- dat[[18]]
temp18
temp19 <- dat[[19]]
temp19
temp20 <- dat[[20]]
temp20
temp21 <- dat[[21]]
temp21
temp21$ch.21.825836
temp22 <- dat[[22]]
temp22
temp23 <- dat[[23]]
temp23
View(temp4)
clin
head(clin)
View(clin)
# Load data
library(tidyr)
library(readr)
library(ggplot2)
library(dplyr)
library(reshape)
library(splitstackshape)
library(tableplot)
data <- '/home/benbrew/Documents/NM_2015_ben/Scripts/06_two_thousand_features/analyze_results/'
setwd(data)
# load data from 2000 features
test_scores_2000 <- read.table('testScores.txt', header = TRUE)
test_scores_2000
# library(reshape2)
######################################################################
# Initialize folders
# homeFolder <- "/hpf/largeprojects/agoldenb/daniel"
home_folder <- '/home/benbrew/Documents'
project_folder <- paste(home_folder, 'NM_2015_ben', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_two_thousand_features", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD") # Removed LUSC
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi", "intPval",
"intCi", "runTime")
imputeCols <- c("cancer", "impute", "seed", "methyl", "mirna", "mrna",
"runtime")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
impute <- loadResults("evaluate_imputation", "imputation.txt",
imputeCols)
originalCluster <- loadResults("evaluate_original_imputation",
"clustering.txt", clusterCols[-3])
# Load the similarity results
similarityCols <- c("cancer", "seed", "similarity", "set", "acc",
"nmi", "pval", "ci", "intAcc", "intNmi",
"intPval", "intCi", "runTime")
similarity <- loadResults("evaluate_similarity", "Similarity.txt",
similarityCols)
originalSimilarity <- loadResults("evaluate_original_similarity",
"similarity.txt",
similarityCols[-2])
######################################################################
# Transform p
cluster$pval <- -log10(cluster$pval)
originalCluster$pval <- -log10(originalCluster$pval)
similarity$pval <- -log10(similarity$pval)
originalSimilarity$pval <- -log10(originalSimilarity$pval)
######################################################################
newSimilarity <- similarity
colnames(newSimilarity)[similarityCols=="similarity"] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- cluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, seed, cluster, acc, nmi,
pval, ci))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
# Compare if the mean of method 1 is significantly greater than the
# mean of m
method_ty
method_types
methodTypes
View(cluster)
temp <- cluster[cluster$set == 1,]
4*4*3
48*50
nrow(cluster)
nrow(similarity)
newSimilarity <- similarity
colnames(newSimilarity)[similarityCols=="similarity"] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- cluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, seed, cluster, acc, nmi,
pval, ci))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
nrow(combinedScores)
12*50
methodTypes
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
# Compare if the mean of method 1 is significantly greater than the
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 6)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, cancer==canc&method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, cancer==canc&method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(canc, met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
}
colnames(testScores) <- c("cancer", "method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
testScores
combinedScores
head(combinedScores)
50 * 60
ibrary(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Data_Types",
"evaluate_imputation", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
######################################################################
# Initialize fixed variables
jvmGBLimit <- 8
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 12
numFeat <- 1000
library(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
cancer <- 'KIRC'
cancerInd <-2
argv <-1
runType <-1
argv <-1
# Store the output in subfolders
resultsFile <- paste(paste(argv, collapse="_"), ".txt", sep="")
constructPath <- function(intermediateFolders, parent=resultsFolder,
file=resultsFile) {
paste(parent, intermediateFolders, file, sep="/")
}
imputationFile <- constructPath("Imputation")
clusteringFile <- constructPath("Clustering")
incompleteFile <- constructPath("Incomplete")
imputedFile <- constructPath("Imputed")
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######################################################################
# Load the original data
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# Load the clinical data
clinicalData <- loadData("clin")
######################################################################
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
# Subset the clinical data so that it corresponds to individuals
# in the complete data
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(completeIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Generate an incomplete data set by extracting all cases which appear
# in all of the data types and removing some of their samples
set.seed(seed)
incompleteIntersection <- generateIncompleteIntersection(cases)
incompleteData <- incompleteIntersection$incomplete
removedData <- incompleteIntersection$removed
# Extract all cases which appear in all of the data types in the
# incomplete data
# Remove samples from the data matrix which only contain NA values.
removeNASamples <- function(data) {
missingInd <- apply(data, 2, function(x) all(is.na(x)))
data <- data[, !missingInd]
return(data)
}
######################################################################
# Select a subset of features which differ most between cases and
# controls.
featureSubsetIndices <- function(cases, subsetSize=numFeat) {
numViews <- length(cases)
featureSubsetInd <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the t-test p-value for each feature, grouped by cases
# and controls
numFeatures <- nrow(cases[[v]])
pval <- sapply(1:numFeatures,
function(i) t.test(cases[[v]][i, ],
controls[[v]][i, ])$p.value)
# Subset the data keeping the features with the smallest p-values
ind <- order(pval)
featureSubsetInd[[v]] <- ind[1:min(subsetSize, numFeatures)]
}
return(featureSubsetInd)
}
subsetData <- function(data, ind) {
for (v in 1:length(data)) {
data[[v]] <- data[[v]][ind[[v]], ]
}
return(data)
}
completeInd <- featureSubsetIndices(completeData)
completeData <- subsetData(completeData, completeInd)
incompleteInd <- featureSubsetIndices(incompleteData)
incompleteData <- subsetData(incompleteData, incompleteInd)
removedData <- subsetData(removedData, incompleteInd)
######################################################################
# Normalize the features in the data sets.
# Normalization is performed before imputation and we expect that the
# data will still be normalized after imputation (before clustering).
rowStatistics <- function(cases) {
numViews <- length(cases)
rowStats <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the row means and standard deviations
rowMean <- apply(cases[[v]], 1, mean, na.rm=TRUE)
rowSd <- apply(cases[[v]], 1, sd, na.rm=TRUE)
constantInd <- rowSd==0
rowSd[constantInd] <- 1
rowStats[[v]] <- list(mean=rowMean, sd=rowSd, ind=constantInd)
}
return(rowStats)
}
normalizeData <- function(data, stat) {
for (v in 1:length(data)) {
data[[v]] <- (data[[v]] - stat[[v]]$mean) / stat[[v]]$sd
data[[v]] <- data[[v]][!stat[[v]]$ind, ]
}
return(data)
}
completeStat <- rowStatistics(completeData)
completeData <- normalizeData(completeData, completeStat)
incompleteStat <- rowStatistics(incompleteData)
incompleteData <- normalizeData(incompleteData, incompleteStat)
removedData <- normalizeData(removedData, incompleteStat)
######################################################################
# Evaluate the performance of the methods
sampleRows <- FALSE
clusteringMethods <- c(#hierarchicalClustering, iClusterClustering,
SNFClustering)
imputationMethods <- c(#knnImputation, llsImputation, lsaImputation,
randomImputation)
# Impute the missing data and save the results
impute <- function(x) imputationMethods[[runType]](x, sampleRows)
imputationOutput <- evaluateImputation(impute, incompleteData,
removedData)
imputedData <- imputationOutput$imputedData
imputationResults <- imputationOutput$results
writeResults(c(argv, imputationResults), imputationFile)
clusteringData <- list(imputedData)
#
i = 1
j = 1
k = 1
fileName <- paste(cancerInd, "_", i, sep="")
fileName <- paste(fileName,"_", j, ".txt", sep="")
filePath <- paste(testFolder, "../cluster_complete_data",
"Results/Labels", fileName, sep="/")
completeLabels <- scan(filePath)
# Initialize clustering function
numClus <- length(unique(completeLabels))
cluster <- function(x) clusteringMethods[[i]](x, numClus,
sampleRows)
data <- clusteringData[[k]]
tcgaID <- function(x) colnames(x[[1]])
dataInd <- match(tcgaID(data), tcgaID(completeData))
clusteringResults <- evaluateClustering(cluster, data,
completeLabels[dataInd],
clinicalData[dataInd, ])
i = 2
fileName
fileName <- paste(cancerInd, "_", i, sep="")
fileName
fileName <- paste(fileName,"_", j, ".txt", sep="")
fileName
i = 1
j
fileName <- paste(cancerInd, "_", i, sep="")
fileName <- paste(fileName,"_", j, ".txt", sep="")
filePath <- paste(testFolder, "../cluster_complete_data",
"Results/Labels", fileName, sep="/")
completeLabels <- scan(filePath)
fileName
j = 2
fileName <- paste(fileName,"_", j, ".txt", sep="")
fileName
i
fileName <- paste(cancerInd, "_", i, sep="")
j
j = 1
newName <- paste(fileName,"_", j, ".txt", sep="")
filePath <- paste(testFolder, "../cluster_complete_data",
"Results/Labels", newName, sep="/")
completeLabels <- scan(filePath)
fileName
newName
j = 2
newName <- paste(fileName,"_", j, ".txt", sep="")
newName
filePath <- paste(testFolder, "../cluster_complete_data",
"Results/Labels", newName, sep="/")
completeLabels <- scan(filePath)
