help(survfit)
help(survival::survfit)
help(survival:::survfit)
plotSurvivalCurve <- function(clinicalData, labels) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
plotSurvivalCurve <- function(clinicalData) {
# Retrieve the patient survival times and death status
survTime <- clinicalData$days_to_death
deathStatus <- clinicalData$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- clinicalData$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
length(clinicalData)
plotSurvivalCurve <- function(data) {
# Retrieve the patient survival times and death status
survTime <- data$days_to_death
deathStatus <- data$vital_status == "dead"
# Replace missing survival times with days to last follow up
missingSurvInd <- is.na(survTime)
lastFollowup <- data$days_to_last_followup
survTime[missingSurvInd] <- lastFollowup[missingSurvInd]
# Plot Kaplan-Meier estimator
survObject <- Surv(survTime, deathStatus)
survFit <- survfit(survObject ~ 1)
plot(survFit)
}
sapply(clinicalData, plotSurvivalCurve)
clinicalData <- vector("list", length(cancerTypes))
for (i in 1:length(cancerTypes)) {
clinicalData[[i]] <- loadData(cancerTypes[i], "clin")
}
cancer <- 'KIRC'
cancerInd <- 2
argv <- 1
runType <- 1
library(SNFtool)
library(iClusterPlus)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features_Dup_1000",
"cluster_complete_data", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
labelsFolder <- paste(resultsFolder, "Labels", sep="/")
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
clusterSizes <- c(5, 5, 4, 5, 5)
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 35
numFeat <- 1000
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
######################################################################
# Select a subset o
colnames(completeData[[1]])
length(colnames(completeData[[1]]))
length(unique(colnames(completeData[[1]])))
length(unique(colnames(cases[[1]])))
length(colnames(cases[[1]]))
transformUnionId <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
return(x)
}
transformUnionId(completeData[[1]])
transformUnionId(colnames(completeData[[1]]))
length(transformUnionId(colnames(completeData[[1]])))
length(unique(transformUnionId(colnames(completeData[[1]]))))
length(unique(transformUnionId(colnames(cases[[1]]))))
cancer <- 'LIHC'
cancerInd <- 3
argv <- 1
# Load libraries
library(SNFtool)
library(iClusterPlus)
######################################################################
# Initialize folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features_Dup_1000",
"cluster_complete_data", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
labelsFolder <- paste(resultsFolder, "Labels", sep="/")
######################################################################
# Initialize fixed variables
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
clusterSizes <- c(5, 5, 4, 5, 5)
dataTypes <- c("methyl", "mirna", "mrna")
numCores <- 35
numFeat <- 1000
# Initialize variable parameters
# Data
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######################################################################
# Load the original data
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
######################################################################
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
######################################################################
# Selec
length(unique(transformUnionId(colnames(completeData[[1]]))))
transformUnionId <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
return(x)
}
length(unique(transformUnionId(colnames(completeData[[1]]))))
length(transformUnionId(colnames(completeData[[1]])))
