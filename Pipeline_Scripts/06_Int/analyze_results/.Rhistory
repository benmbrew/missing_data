data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$intAcc + score1$inNmi
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, method==met2)
totalScores2 <- score2$intAcc + score2$intNmi
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c( met1, sum(scoreVector)))
}
colnames(testScores) <- c "method", "score")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
isGreaterIntUnion <- function(data) {
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$intAcc + score1$inNmi
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, method==met2)
totalScores2 <- score2$intAcc + score2$intNmi
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c( met1, sum(scoreVector)))
}
colnames(testScores) <- c ("method", "score")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresIntUnion <- isGreaterIntUnion(scoresOrigIntDup)
keep <- c("X", "cancer", "impute", "cluster", "acc", "nmi", "pval", "ci", "method")
scoresNormal <- scoresNormal[, keep]
scoresLUSCNormalDup <- scoresLUSCNormalDup[, keep]
scoresCombat$cancer <- 'KIRC'
scoresCombatDup$cancer <- 'KIRC'
scoresCombat <- scoresCombat[, keep]
scoresCombatDup <- scoresCombatDup[, keep]
# Now add in combat and LUSC
scoresAll <- rbind(scoresNormal, scoresLUSCNormalDup, scoresCombat)
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi + score1$pval + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$pval + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAll <- isGreaterTotal(scoresAll)
View(testScoresAll)
testScoresAll[sort(testScoresAll$score),]
View(testScoresAll)
# First subset all data by important variables so you can combing combat and LUSC to scoresNormal and scoresNormalOrigDup
keep <- c("X", "cancer", "impute", "cluster", "acc", "nmi", "pval", "ci", "method")
scoresNormal <- scoresNormal[, keep]
scoresLUSCNormalDup <- scoresLUSCNormalDup[, keep]
scoresCombat$cancer <- 'KIRC_combat'
scoresCombatDup$cancer <- 'KIRC_combat_dup'
scoresCombat <- scoresCombat[, keep]
scoresCombatDup <- scoresCombatDup[, keep]
# Now add in combat and LUSC
scoresAll <- rbind(scoresNormal, scoresLUSCNormalDup, scoresCombat)
################ For Acc, nmi, pval, and ci
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi + score1$pval + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$pval + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAll <- isGreaterTotal(scoresAll)
testScoresAll[sort(testScoresAll$score),]
View(testScoresAll)
View(testScoresAllNoP)
# This script will take the results from all folder and make barplots for each strategy and method
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
scoresNormal <- read.csv(paste0(results_folder, '/scoresTwoThousand.csv'))
scoresNormal1000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup1000.csv'))
scoresNormal3000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup3000.csv'))
scoresNormalOrig <- read.csv(paste0(results_folder, '/scoresTwoThousandOrig.csv'))
scoresNormalOrigDup <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup.csv'))
scoresNormalOrigDup1000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup1000.csv'))
scoresNormalOrigDup3000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup3000.csv'))
scoresLUSCOrigDup <- read.csv(paste0(results_folder, '/scoresLUSCOrigDup.csv'))
scoresLUSCNormalDup <- read.csv(paste0(results_folder, '/scoresLUSCNormalDup.csv'))
scoresCombat <- read.csv(paste0(results_folder, '/scoresCombat.csv'))
scoresCombatDup <- read.csv(paste0(results_folder, '/scoresCombatDup.csv'))
scoresCombatOrigDup <- read.csv(paste0(results_folder, '/scoresCombatOrigDup.csv'))
scoresOrigIntDup <- read.csv(paste0(results_folder, '/scoresTwoThousandOrigIntDup.csv'))
###################################################################################################
# Get method types
scoresNormal$method <- interaction(scoresNormal$cluster,
scoresNormal$impute, drop = TRUE)
scoresNormal1000$method <- interaction(scoresNormal1000$cluster,
scoresNormal1000$impute, drop = TRUE)
scoresNormal3000$method <- interaction(scoresNormal3000$cluster,
scoresNormal3000$impute, drop = TRUE)
scoresLUSCNormalDup$method <- interaction(scoresLUSCNormalDup$cluster,
scoresLUSCNormalDup$impute, drop = TRUE)
scoresCombat$method <- interaction(scoresCombat$cluster,
scoresCombat$impute, drop = TRUE)
scoresCombatDup$method <- interaction(scoresCombatDup$cluster,
scoresCombatDup$impute, drop = TRUE)
scoresCombatOrigDup$method <- interaction(scoresCombatOrigDup$cluster,
scoresCombatOrigDup$impute, drop = TRUE)
scoresNormalOrig$method <- interaction(scoresNormalOrig$cluster,
scoresNormalOrig$impute, drop = TRUE)
scoresNormalOrigDup$method <- interaction(scoresNormalOrigDup$cluster,
scoresNormalOrigDup$impute, drop = TRUE)
scoresNormalOrigDup1000$method <- interaction(scoresNormalOrigDup1000$cluster,
scoresNormalOrigDup1000$impute, drop = TRUE)
scoresNormalOrigDup3000$method <- interaction(scoresNormalOrigDup3000$cluster,
scoresNormalOrigDup3000$impute, drop = TRUE)
scoresLUSCOrigDup$method <- interaction(scoresLUSCOrigDup$cluster,
scoresLUSCOrigDup$impute, drop = TRUE)
scoresOrigIntDup$method <- interaction(scoresOrigIntDup$cluster,
scoresOrigIntDup$impute, drop = TRUE)
####################################################################################################
# remove NAs
scoresNormal <- scoresNormal[complete.cases(scoresNormal),]
scoresNormal1000 <- scoresNormal1000[complete.cases(scoresNormal1000),]
scoresNormal3000 <- scoresNormal3000[complete.cases(scoresNormal3000),]
scoresNormalOrig <- scoresNormalOrig[complete.cases(scoresNormalOrig),]
scoresNormalOrigDup <- scoresNormalOrigDup[complete.cases(scoresNormalOrigDup),]
scoresNormalOrigDup1000 <- scoresNormalOrigDup1000[complete.cases(scoresNormalOrigDup1000),]
scoresNormalOrigDup3000 <- scoresNormalOrigDup3000[complete.cases(scoresNormalOrigDup3000),]
scoresLUSCNormalDup <- scoresLUSCNormalDup[complete.cases(scoresLUSCNormalDup),]
scoresLUSCOrigDup <- scoresLUSCOrigDup[complete.cases(scoresLUSCOrigDup),]
scoresCombat <- scoresCombat[complete.cases(scoresCombat),]
scoresCombatDup <- scoresCombatDup[complete.cases(scoresCombatDup),]
scoresCombatOrigDup <- scoresCombatOrigDup[complete.cases(scoresCombatOrigDup),]
scoresOrigIntDup <- scoresOrigIntDup[complete.cases(scoresOrigIntDup),]
####################################################################################################
# For each cancer, compare all scores together
# First subset all data by important variables so you can combing combat and LUSC to scoresNormal and scoresNormalOrigDup
keep <- c("X", "cancer", "impute", "cluster", "acc", "nmi", "pval", "ci", "method")
scoresNormal <- scoresNormal[, keep]
scoresLUSCNormalDup <- scoresLUSCNormalDup[, keep]
scoresCombat$cancer <- 'KIRC_combat'
scoresCombatDup$cancer <- 'KIRC_combat_dup'
scoresCombat <- scoresCombat[, keep]
scoresCombatDup <- scoresCombatDup[, keep]
# Now add in combat and LUSC
scoresAll <- rbind(scoresNormal, scoresLUSCNormalDup, scoresCombat)
cancerTypes <- c("BRCA", "KIRC","KIRC_combat", "LIHC", "LUAD", "LUSC")
################## For Acc, nmi, pval, and ci
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC","KIRC_combat", "LIHC", "LUAD", "LUSC")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi + score1$pval + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$pval + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAll <- isGreaterTotal(scoresAll)
View(scoresCombat)
View(scoresAll)
# This script will take the results from all folder and make barplots for each strategy and method
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
scoresNormal <- read.csv(paste0(results_folder, '/scoresTwoThousand.csv'))
scoresNormal1000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup1000.csv'))
scoresNormal3000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup3000.csv'))
scoresNormalOrig <- read.csv(paste0(results_folder, '/scoresTwoThousandOrig.csv'))
scoresNormalOrigDup <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup.csv'))
scoresNormalOrigDup1000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup1000.csv'))
scoresNormalOrigDup3000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup3000.csv'))
scoresLUSCOrigDup <- read.csv(paste0(results_folder, '/scoresLUSCOrigDup.csv'))
scoresLUSCNormalDup <- read.csv(paste0(results_folder, '/scoresLUSCNormalDup.csv'))
scoresCombat <- read.csv(paste0(results_folder, '/scoresCombat.csv'))
scoresCombatDup <- read.csv(paste0(results_folder, '/scoresCombatDup.csv'))
scoresCombatOrigDup <- read.csv(paste0(results_folder, '/scoresCombatOrigDup.csv'))
scoresOrigIntDup <- read.csv(paste0(results_folder, '/scoresTwoThousandOrigIntDup.csv'))
###################################################################################################
# Get method types
scoresNormal$method <- interaction(scoresNormal$cluster,
scoresNormal$impute, drop = TRUE)
scoresNormal1000$method <- interaction(scoresNormal1000$cluster,
scoresNormal1000$impute, drop = TRUE)
scoresNormal3000$method <- interaction(scoresNormal3000$cluster,
scoresNormal3000$impute, drop = TRUE)
scoresLUSCNormalDup$method <- interaction(scoresLUSCNormalDup$cluster,
scoresLUSCNormalDup$impute, drop = TRUE)
scoresCombat$method <- interaction(scoresCombat$cluster,
scoresCombat$impute, drop = TRUE)
scoresCombatDup$method <- interaction(scoresCombatDup$cluster,
scoresCombatDup$impute, drop = TRUE)
scoresCombatOrigDup$method <- interaction(scoresCombatOrigDup$cluster,
scoresCombatOrigDup$impute, drop = TRUE)
scoresNormalOrig$method <- interaction(scoresNormalOrig$cluster,
scoresNormalOrig$impute, drop = TRUE)
scoresNormalOrigDup$method <- interaction(scoresNormalOrigDup$cluster,
scoresNormalOrigDup$impute, drop = TRUE)
scoresNormalOrigDup1000$method <- interaction(scoresNormalOrigDup1000$cluster,
scoresNormalOrigDup1000$impute, drop = TRUE)
scoresNormalOrigDup3000$method <- interaction(scoresNormalOrigDup3000$cluster,
scoresNormalOrigDup3000$impute, drop = TRUE)
scoresLUSCOrigDup$method <- interaction(scoresLUSCOrigDup$cluster,
scoresLUSCOrigDup$impute, drop = TRUE)
scoresOrigIntDup$method <- interaction(scoresOrigIntDup$cluster,
scoresOrigIntDup$impute, drop = TRUE)
####################################################################################################
# remove NAs
scoresNormal <- scoresNormal[complete.cases(scoresNormal),]
scoresNormal1000 <- scoresNormal1000[complete.cases(scoresNormal1000),]
scoresNormal3000 <- scoresNormal3000[complete.cases(scoresNormal3000),]
scoresNormalOrig <- scoresNormalOrig[complete.cases(scoresNormalOrig),]
scoresNormalOrigDup <- scoresNormalOrigDup[complete.cases(scoresNormalOrigDup),]
scoresNormalOrigDup1000 <- scoresNormalOrigDup1000[complete.cases(scoresNormalOrigDup1000),]
scoresNormalOrigDup3000 <- scoresNormalOrigDup3000[complete.cases(scoresNormalOrigDup3000),]
scoresLUSCNormalDup <- scoresLUSCNormalDup[complete.cases(scoresLUSCNormalDup),]
scoresLUSCOrigDup <- scoresLUSCOrigDup[complete.cases(scoresLUSCOrigDup),]
scoresCombat <- scoresCombat[complete.cases(scoresCombat),]
scoresCombatDup <- scoresCombatDup[complete.cases(scoresCombatDup),]
scoresCombatOrigDup <- scoresCombatOrigDup[complete.cases(scoresCombatOrigDup),]
scoresOrigIntDup <- scoresOrigIntDup[complete.cases(scoresOrigIntDup),]
####################################################################################################
# For each cancer, compare all scores together
# First subset all data by important variables so you can combing combat and LUSC to scoresNormal and scoresNormalOrigDup
keep <- c("X", "cancer", "impute", "cluster", "acc", "nmi", "pval", "ci", "method")
scoresNormal <- scoresNormal[, keep]
scoresLUSCNormalDup <- scoresLUSCNormalDup[, keep]
scoresCombat$cancer <- 'KIRC_combat'
scoresCombatDup$cancer <- 'KIRC_combat_dup'
scoresCombat <- scoresCombat[, keep]
scoresCombatDup <- scoresCombatDup[, keep]
# Now add in combat and LUSC
scoresAll <- rbind(scoresNormal, scoresLUSCNormalDup, scoresCombat)
View(scoresAll)
summary(scoresAll$cancer)
summary(as.factor(scoresAll$cancer))
# This script will take the results from all folder and make barplots for each strategy and method
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
scoresNormal <- read.csv(paste0(results_folder, '/scoresTwoThousand.csv'))
scoresNormal1000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup1000.csv'))
scoresNormal3000 <- read.csv(paste0(results_folder, '/scoresTwoThousandDup3000.csv'))
scoresNormalOrig <- read.csv(paste0(results_folder, '/scoresTwoThousandOrig.csv'))
scoresNormalOrigDup <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup.csv'))
scoresNormalOrigDup1000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup1000.csv'))
scoresNormalOrigDup3000 <- read.csv(paste0(results_folder, '/scoresOrigTwoThousandDup3000.csv'))
scoresLUSCOrigDup <- read.csv(paste0(results_folder, '/scoresLUSCOrigDup.csv'))
scoresLUSCNormalDup <- read.csv(paste0(results_folder, '/scoresLUSCNormalDup.csv'))
scoresCombat <- read.csv(paste0(results_folder, '/scoresCombat.csv'))
scoresCombatDup <- read.csv(paste0(results_folder, '/scoresCombatDup.csv'))
scoresCombatOrigDup <- read.csv(paste0(results_folder, '/scoresCombatOrigDup.csv'))
scoresOrigIntDup <- read.csv(paste0(results_folder, '/scoresTwoThousandOrigIntDup.csv'))
###################################################################################################
# Get method types
scoresNormal$method <- interaction(scoresNormal$cluster,
scoresNormal$impute, drop = TRUE)
scoresNormal1000$method <- interaction(scoresNormal1000$cluster,
scoresNormal1000$impute, drop = TRUE)
scoresNormal3000$method <- interaction(scoresNormal3000$cluster,
scoresNormal3000$impute, drop = TRUE)
scoresLUSCNormalDup$method <- interaction(scoresLUSCNormalDup$cluster,
scoresLUSCNormalDup$impute, drop = TRUE)
scoresCombat$method <- interaction(scoresCombat$cluster,
scoresCombat$impute, drop = TRUE)
scoresCombatDup$method <- interaction(scoresCombatDup$cluster,
scoresCombatDup$impute, drop = TRUE)
scoresCombatOrigDup$method <- interaction(scoresCombatOrigDup$cluster,
scoresCombatOrigDup$impute, drop = TRUE)
scoresNormalOrig$method <- interaction(scoresNormalOrig$cluster,
scoresNormalOrig$impute, drop = TRUE)
scoresNormalOrigDup$method <- interaction(scoresNormalOrigDup$cluster,
scoresNormalOrigDup$impute, drop = TRUE)
scoresNormalOrigDup1000$method <- interaction(scoresNormalOrigDup1000$cluster,
scoresNormalOrigDup1000$impute, drop = TRUE)
scoresNormalOrigDup3000$method <- interaction(scoresNormalOrigDup3000$cluster,
scoresNormalOrigDup3000$impute, drop = TRUE)
scoresLUSCOrigDup$method <- interaction(scoresLUSCOrigDup$cluster,
scoresLUSCOrigDup$impute, drop = TRUE)
scoresOrigIntDup$method <- interaction(scoresOrigIntDup$cluster,
scoresOrigIntDup$impute, drop = TRUE)
####################################################################################################
# remove NAs
scoresNormal <- scoresNormal[complete.cases(scoresNormal),]
scoresNormal1000 <- scoresNormal1000[complete.cases(scoresNormal1000),]
scoresNormal3000 <- scoresNormal3000[complete.cases(scoresNormal3000),]
scoresNormalOrig <- scoresNormalOrig[complete.cases(scoresNormalOrig),]
scoresNormalOrigDup <- scoresNormalOrigDup[complete.cases(scoresNormalOrigDup),]
scoresNormalOrigDup1000 <- scoresNormalOrigDup1000[complete.cases(scoresNormalOrigDup1000),]
scoresNormalOrigDup3000 <- scoresNormalOrigDup3000[complete.cases(scoresNormalOrigDup3000),]
scoresLUSCNormalDup <- scoresLUSCNormalDup[complete.cases(scoresLUSCNormalDup),]
scoresLUSCOrigDup <- scoresLUSCOrigDup[complete.cases(scoresLUSCOrigDup),]
scoresCombat <- scoresCombat[complete.cases(scoresCombat),]
scoresCombatDup <- scoresCombatDup[complete.cases(scoresCombatDup),]
scoresCombatOrigDup <- scoresCombatOrigDup[complete.cases(scoresCombatOrigDup),]
scoresOrigIntDup <- scoresOrigIntDup[complete.cases(scoresOrigIntDup),]
####################################################################################################
# For each cancer, compare all scores together
# First subset all data by important variables so you can combing combat and LUSC to scoresNormal and scoresNormalOrigDup
keep <- c("X", "cancer", "impute", "cluster", "acc", "nmi", "pval", "ci", "method")
scoresNormal <- scoresNormal[, keep]
scoresLUSCNormalDup <- scoresLUSCNormalDup[, keep]
scoresCombat$cancer <- 6
scoresCombatDup$cancer <- 6
scoresCombat <- scoresCombat[, keep]
scoresCombatDup <- scoresCombatDup[, keep]
# Now add in combat and LUSC
scoresAll <- rbind(scoresNormal, scoresLUSCNormalDup, scoresCombat)
################## For Acc, nmi, pval, and ci
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC", "KIRC_combat")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi + score1$pval + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$pval + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAll <- isGreaterTotal(scoresAll)
View(testScoresAll)
########################### for acc, nmi, ci
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi  + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAllNoP <- isGreaterTotal(scoresAll)
isGreaterTotal <- function(data) {
cancerTypes <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC", "KIRC_combat")
methodTypes <- levels(data$method)
data$method <- as.numeric(data$method)
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=FALSE, na.action = na.omit, var.equal = FALSE)$p.value < 0.05
}
testScores <- matrix(, 0, 3)
for (canc in 1:length(cancerTypes)) {
for (met1 in 1:length(methodTypes)) {
score1 <- subset(data, cancer==canc&method==met1)
scoreVector <- rep.int(0, length(methodTypes))
totalScores <- score1$acc + score1$nmi  + score1$ci
print(met1)
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(data, cancer==canc&method==met2)
totalScores2 <- score2$acc + score2$nmi + score2$ci
scoreVector[met2] <- xGreaterY(totalScores, totalScores2)
}
testScores <- rbind(testScores,
c(canc, met1, sum(scoreVector)))
}
}
colnames(testScores) <- c("cancer", "method", "score")
testScores <- as.data.frame(testScores)
testScores$cancer <- cancerTypes[testScores$cancer]
testScores$method <- methodTypes[testScores$method]
return(testScores)
}
testScoresAllNoP <- isGreaterTotal(scoresAll)
View(testScoresAllNoP)
