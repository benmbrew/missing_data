xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & pvalcox) {
temp <- data %>%
group_by(method) %>%
summarise(meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_p) {
temp <- data %>%
group_by(method) %>%
summarise(meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_ci) {
temp <- data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & bias) {
temp <- data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(bias_corrected_c_index, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & coef) {
temp <- data %>%
group_by(method) %>%
summarise(meanCoef = mean(coefcox, na.rm = T),
meanStd = mean(se.std, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (normal) {
temp <- data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
}
}
groupbyMethod(scoresNormal, normal = TRUE, title = 'Intersection All Cancers')
groupbyMethod(scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union All Cancers')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union All Cancers Dup')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, pvalcox = TRUE, title = 'Pvalcox Union All Cancers Dup')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, con_index_p = TRUE, title = 'Con PUnion All Cancers Dup')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, con_index_ci = TRUE, title = 'Con Ci Union All Cancers Dup')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, bias = TRUE, title = 'Bias Union All Cancers Dup')
groupbyMethod(scoresNormalOrigDup, orig = TRUE, coef = TRUE, title = 'Coef Union All Cancers Dup')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, pval = TRUE, title = 'Pval Union All Cancers DupSeed')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, pvalcox = TRUE, title = 'Pvalcox Union All Cancers DupSeed')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, con_index_p = TRUE, title = 'Con PUnion All Cancers DupSeed')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, con_index_ci = TRUE, title = 'Con CiUnion All Cancers DupSeed')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, bias = TRUE, title = 'Bias Union All Cancers DupSeed')
groupbyMethod(scoresNormalOrigDupSeed, orig = TRUE, coef = TRUE, title = 'Coef Union All Cancers Dupseed')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, pval = TRUE, title = 'Pval Union All Cancers NA')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, pvalcox = TRUE, title = 'Pvalcox Union All Cancers NA')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, con_index_p = TRUE, title = 'Con PUnion All Cancers NA')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, con_index_ci = TRUE, title = 'Con CiUnion All Cancers NA')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, bias = TRUE, title = 'Bias Union All Cancers NA')
groupbyMethod(scoresNormalOrigNA, orig = TRUE, coef = TRUE, title = 'Coef Union All Cancers NA')
groupbyMethod(scoresNormalOrigClust, orig = TRUE, pval = TRUE, title = 'Original Data')
groupbyMethod(scoresGenderMale,normal = TRUE, title = 'Complete Data Male')
groupbyMethod(scoresGenderOrigMale, orig = TRUE, normal = TRUE, title = 'Original Data Male')
groupbyMethod(scoresGenderFemale, normal = TRUE, title = 'Complete Data with Female')
groupbyMethod(scoresGenderOrigFemale, orig = TRUE, pval = TRUE, title = 'Original Data with Female')
# ############################################################################################
# # Group by cluster
#
# groupbyCluster <- function(data, orig = FALSE, title) {
#
#   if (orig) {
#     temp <- data %>%
#       group_by(cluster) %>%
#       summarise(meanPval = mean(pval, na.rm = T),
#                 meanCi = mean(ci, na.rm = T))
#
#     temp_melt <- melt(temp, id.vars = c('cluster'))
#     ggplot(data = temp_melt, aes(reorder(cluster, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
#       xlab('cluster') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
#
#   } else {
#
#     temp <- data %>%
#       group_by(cluster) %>%
#       summarise(meanAcc = mean(acc, na.rm = T),
#                 meanNmi = mean(nmi, na.rm = T),
#                 meanPval = mean(pval, na.rm = T),
#                 meanCi = mean(ci, na.rm = T))
#
#     temp_melt <- melt(temp, id.vars = c('cluster'))
#
#     ggplot(data = temp_melt, aes(reorder(cluster, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
#       xlab('cluster') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
#   }
# }
#
#
# groupbyCluster(scoresNormal, title = 'Intersection All Cancers')
# groupbyCluster(scoresNormalOrig, orig = TRUE, title = 'Union All Cancers')
# groupbyCluster(scoresNormalOrigDupSeed, orig = TRUE, title = 'Union All Cancers with Seeds and duplications removed')
# groupbyCluster(scoresNormalOrigDup, orig = TRUE, title = 'Union No Duplicates All Cancers')
# groupbyCluster(scoresNormalOrigNA, orig = TRUE, title = 'Original Data')
# groupbyCluster(scoresNormalOrigClust, orig = TRUE, title = 'Original Data')
# groupbyCluster(scoresLUSCOrigDup, orig = TRUE, title = 'LUSC Original Data')
#
# groupbyCluster(scoresCombat, title = 'Complete Data with Combat')
# groupbyCluster(scoresCombatOrig, orig = TRUE, title = 'Original Data with Combat')
# groupbyCluster(scoresCombatOrigDup, orig = TRUE, title = 'Original Data with Combat, Revoed Dups')
# groupbyCluster(scoresCombatOrigDupSeed, orig = TRUE, title = 'Original Data with Combat, Removed Dups and random')
#
# groupbyCluster(scoresGenderMale, title = 'Complete Data Male')
# groupbyCluster(scoresGenderOrigMale, orig = TRUE, title = 'Original Data Male')
#
# groupbyCluster(scoresGenderFemale, title = 'Complete Data with Female')
# groupbyCluster(scoresGenderOrigFemale, orig = TRUE, title = 'Original Data with Female')
#
# ############################################################################################
# # Group by impute
#
# groupbyimpute <- function(data, orig = FALSE, title) {
#
#   if (orig) {
#     temp <- data %>%
#       group_by(impute) %>%
#       summarise(meanPval = mean(pval, na.rm = T),
#                 meanCi = mean(ci, na.rm = T))
#
#     temp_melt <- melt(temp, id.vars = c('impute'))
#     ggplot(data = temp_melt, aes(reorder(impute, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
#       xlab('impute') + ylab('Mean Score') +  ggtitle(title) + theme_538_bar
#
#   } else {
#
#     temp <- data %>%
#       group_by(impute) %>%
#       summar
##################################################################################################
# Group by cancer and method and mean of evaluation.
groupbyCancer <- function(cancer, data, orig = FALSE,
normal = FALSE,
pval = FALSE,
pvalcox = FALSE,
con_index_p = FALSE,
con_index_ci = FALSE,
bias = FALSE,
coef = FALSE,
title) {
temp_data <- data[data$cancer == cancer,]
if ((orig) && (pval)) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_p) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & bias) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(bias_corrected_c_index, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & coef) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanCoef = mean(coefcox, na.rm = T),
meanStd = mean(se.std, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (normal) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_p) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(con_index_ci, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(con_index_ci, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
}
}
groupbyCancer(cancer = 1, scoresNormal, normal = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, pvalcox = TRUE, title = 'Pvalcox Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, con_index_p = TRUE, title = 'Con PUnion BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, con_index_ci = TRUE, title = 'Con Ci Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, bias = TRUE, title = 'bias Union BRCA Dup')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, coef = TRUE, title = 'coef Union BRCA Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pvalcox = TRUE, title = 'Pvalcox Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_p = TRUE, title = 'Con PUnion luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_ci = TRUE, title = 'Con Ci Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, bias = TRUE, title = 'bias Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, coef = TRUE, title = 'coef Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pvalcox = TRUE, title = 'Pvalcox Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_p = TRUE, title = 'Con PUnion luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_ci = TRUE, title = 'Con Ci Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, bias = TRUE, title = 'bias Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, coef = TRUE, title = 'coef Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pvalcox = TRUE, title = 'Pvalcox Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_p = TRUE, title = 'Con PUnion luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_ci = TRUE, title = 'Con Ci Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, bias = TRUE, title = 'bias Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, coef = TRUE, title = 'coef Union luad Dup')
# Group by cancer and method and mean of evaluation.
groupbyCancer <- function(cancer, data, orig = FALSE,
normal = FALSE,
pval = FALSE,
pvalcox = FALSE,
con_index_p = FALSE,
con_index_ci = FALSE,
bias = FALSE,
coef = FALSE,
title) {
temp_data <- data[data$cancer == cancer,]
if ((orig) && (pval)) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_p) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & bias) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanPval = mean(pval, na.rm = T),
meanCi = mean(bias_corrected_c_index, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (orig & coef) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanCoef = mean(coefcox, na.rm = T),
meanStd = mean(se.std, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ylab('Mean Score') + ggtitle(title) + theme_538_bar
} else if (normal) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & pvalcox) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pvalcox, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_p) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(con_index_p, na.rm = T),
meanCi = mean(ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
} else if (normal & con_index_ci) {
temp <- temp_data %>%
group_by(method) %>%
summarise(meanAcc = mean(acc, na.rm = T),
meanNmi = mean(nmi, na.rm = T),
meanPval = mean(pval, na.rm = T),
meanCi = mean(con_index_ci, na.rm = T))
temp_melt <- melt(temp, id.vars = c('method'))
ggplot(data = temp_melt, aes(reorder(method, -value), value, fill = variable)) + geom_bar(stat = 'identity') +
xlab('Method') + ggtitle(title) + theme_538_bar
}
}
groupbyCancer(cancer = 1, scoresNormal, normal = TRUE, title = 'Intersection BRCA')
groupbyCancer(cancer = 1, scoresNormalOrig, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA')
groupbyCancer(cancer = 1, scoresNormalOrigDup, orig = TRUE, pval = TRUE, title = 'Pval Union BRCA Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pval = TRUE, title = 'Pval Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, pvalcox = TRUE, title = 'Pvalcox Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_p = TRUE, title = 'Con PUnion luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, con_index_ci = TRUE, title = 'Con Ci Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, bias = TRUE, title = 'bias Union luad Dup')
groupbyCancer(cancer = 5, scoresLUSCNormalDup, normal = TRUE, coef = TRUE, title = 'coef Union luad Dup')
# Evalute the results of the evaluate_imputation tests
######################################################################
# Load libraries
# library(dplyr)
# library(reshape2)
######################################################################
# Initialize folders
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", "06_LUSC", sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
######################################################################
# Initialize fixed variables
cancerTypes <- 'LUSC'
dataTypes <- c("methyl", "mirna", "mrna")
imputeTypes <- c("KNN", "LLS", "LSA", "Rand")
clusterTypes <- c("Hierarchical", "iCluster", "SNF")
setTypes <- c("Union", "Intersect")
similarityTypes <- c("Self", "Median", "Regres")
######################################################################
# Load the results
# Accuracy and NMI metrics are meaningless in the original results
# because they were compared to randomly generated labels
loadResults <- function(test_folder, file_name, colNames=NULL) {
file_path <- paste(scripts_folder, test_folder, "Results", file_name,
sep="/")
read.table(file_path, header=FALSE, col.names=colNames)
}
# Load the imputation results
clusterCols <- c("cancer", "impute", "seed", "cluster", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
cluster <- loadResults("evaluate_imputation", "clustering.txt",
clusterCols)
# Load the similarity results
similarityCols <- c("cancer", "seed", "similarity", "set", "acc",
"nmi", "pval", "ci", "se.std", "pvalcox", "coefcox", "con_index_ci", "con_index_p",
"bias_corrected_c_index")
similarity <- loadResults("evaluate_similarity", "similarity.txt",
similarityCols)
######################################################################
# Transform pval to -log10(pval)
cluster$pval <- -log10(cluster$pval)
cluster$pvalcox <- -log10(cluster$pvalcox)
cluster$con_index_p <- -log10(cluster$con_index_p)
# originalCluster$pval <- -log10(originalCluster$pval)
# originalCluster$pvalcox <- -log10(originalCluster$pvalcox)
# originalCluster$con_index_p <- -log10(originalCluster$con_index_p)
similarity$pval <- -log10(similarity$pval)
similarity$pvalcox <- -log10(similarity$pvalcox)
similarity$con_index_p <- -log10(similarity$con_index_p)
# originalSimilarity$pval <- -log10(originalSimilarity$pval)
# originalSimilarity$pvalcox <- -log10(originalSimilarity$pvalcox)
# originalSimilarity$con_index_p <- -log10(originalSimilarity$con_index_p)
#####################
# -rename "similarity" column to "impute"
newSimilarity <- similarity
colnames(newSimilarity)[similarityCols=="similarity"] <- "impute"
newSimilarity$cluster <- "SNF"
newSimilarity$impute <- similarityTypes[newSimilarity$impute]
newCluster <- cluster
newCluster$cluster <- clusterTypes[newCluster$cluster]
newCluster$impute <- imputeTypes[newCluster$impute]
combinedScores <- rbind(newCluster, newSimilarity)
combinedScores <- subset(combinedScores, set==1,
c(cancer, impute, cluster, acc, nmi,
pval, ci,se.std, pvalcox, coefcox, con_index_ci, con_index_p,
bias_corrected_c_index))
combinedScores$method <- interaction(combinedScores$cluster,
combinedScores$impute, drop=TRUE)
methodTypes <- levels(combinedScores$method)
combinedScores$method <- as.numeric(combinedScores$method)
# Remove Inf pval's
combinedScores$pval[is.infinite(combinedScores$pval)] <- NA
# Write combinedScores to results folder
write.csv(combinedScores, paste0(results_folder, '/scoresLUSCNormalDup.csv'))
# Compare if the mean of method 1 is significantly greater than the
# mean of method 2, for every pair of methods and cancer type
xGreaterY <- function(x, y) {
t.test(x, y, alternative="greater", paired=TRUE, na.action = na.omit)$p.value < 0.05
}
testScores <- matrix(, 0, 5)
for (met1 in 1:length(methodTypes)) {
score1 <- subset(combinedScores, method==met1)
accVector <- rep.int(0, length(methodTypes))
nmiVector <- accVector
pvalVector <- accVector
ciVector <- accVector
for (met2 in (1:length(methodTypes))[-met1]) {
score2 <- subset(combinedScores, method==met2)
accVector[met2] <- xGreaterY(score1$acc, score2$acc)
nmiVector[met2] <- xGreaterY(score1$nmi, score2$nmi)
pvalVector[met2] <- xGreaterY(score1$pval, score2$pval)
ciVector[met2] <- xGreaterY(score1$ci, score2$ci)
}
testScores <- rbind(testScores,
c(met1, sum(accVector), sum(nmiVector),
sum(pvalVector), sum(ciVector)))
}
colnames(testScores) <- c("method", "acc", "nmi", "pval",
"ci")
testScores <- as.data.frame(testScores)
testScores$method <- methodTypes[testScores$method]
View(testScores)
