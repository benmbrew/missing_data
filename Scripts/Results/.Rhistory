# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-0.8,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.08,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.05,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
#####################################################################
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.03,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.01,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.1,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=-.005,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=10),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=15),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
homeFolder <- "/home/benbrew/Desktop"
rawDataFolder <- "/home/benbrew/Desktop"
loadData <- function(cancer, dataType, fileSuffix) {
processingResult <- "BasicProcessingResult"
rownamesIndex <- 1
removeIndices <- 1:2
if (dataType=="methyl") {
processingResult <- "AdvancedProcessingResult"
} else if (dataType=="mirna") {
removeIndices <- 1
} else if (dataType=="rna") {
rownamesIndex <- 2
}
# Load the data
data <- NULL
fileName <- paste(cancer, dataType, fileSuffix, sep="_")
filePath <- paste(rawDataFolder, cancer, processingResult, fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Rename the columns and rows
colnames(data) <- substr(colnames(data), 1, 16)
rownames(data) <- data[, rownamesIndex]
# Convert the data frame to a numeric matrix
data <- as.matrix(data[, -removeIndices])
}
return(data)
}
primarySolidTumors <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "01")
}
solidTissueNormals <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType == "11")
}
otherSampleTypes <- function(data) {
tcgaIDs <- colnames(data)
sampleType <- substr(tcgaIDs, 14, 15)
return(sampleType[!(sampleType %in% c("01", "11"))])
}
missingFeatures <- function(data) {
return(apply(data, 1, function(x) any(is.na(x))))
}
constantFeatures <- function(data) {
return(apply(data, 1, function(x) var(x)==0))
}
logTransformData <- function(data) {
return(log(data+1, base=2))
}
extractRelevantData <- function(data) {
# Remove features which are missing from any sample
data <- data[!missingFeatures(data), ]
# Remove features with no variance
data <- data[!constantFeatures(data), ]
# Extract the tumor and normal samples
cases <- data[, primarySolidTumors(data)]
controls <- data[, solidTissueNormals(data)]
return(list(cases=cases, controls=controls))
}
cancers <- 'KIRC'
mrna <- loadData(cancer, "rna", "gene.txt")
read.table('/home/benbrew/Desktop/KIRC_rna_exon.txt')
read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt')
temp <- read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt')
temp <- read.delim(head('/home/benbrew/Desktop/KIRC_rna_exon.txt'))
temp <- head(read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt'))
temp <- read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt', nrows = 5, header = TRUE)
View(temp)
temp <- read.delim('/home/benbrew/Desktop/KIRC_rna_gene.txt', nrows = 5, header = TRUE)
View(temp)
exon <- read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt', nrows = 5, header = TRUE)
gene <- read.delim('/home/benbrew/Desktop/KIRC_rna_gene.txt', nrows = 5, header = TRUE)
exon <- read.delim('/home/benbrew/Desktop/KIRC_rna_exon.txt', nrows = 10, header = TRUE)
gene <- read.delim('/home/benbrew/Desktop/KIRC_rna_gene.txt', nrows = 10, header = TRUE)
View(exon)
View(gene)
################################################################################################
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# initialize fixed variables
cancer <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
################################################################################################
# Load data
int_results <- read.csv(paste0(results_folder, '/final_results_intersection.csv'))
union_results <- read.csv(paste0(results_folder, '/final_results_union.csv'))
################################################################################################
# Get rid of unnecessary columns
int_results$cluster <- NULL
int_results$union_rank <- NULL
union_results$clusters <- NULL
################################################################################################
## add rank to for each imputation and clustering method and combination of methods
# create a variable for imputation and cluster
createColumn <-
function(data, impute) {
temp <- strsplit(as.character(data$method), '.', fixed = TRUE)
if (impute) {
temp.2 <- lapply(temp, function(x) x[length(x)])
data$imputation <- temp.2
} else {
temp.2 <- lapply(temp, function(x) x[length(x) - 1])
data$cluster <- temp.2
}
return(data)
}
int_results <- createColumn(int_results, impute = TRUE)
int_results <- createColumn(int_results, impute = FALSE)
union_results <- createColumn(union_results, impute = TRUE)
union_results <- createColumn(union_results, impute = FALSE)
# create ranking for imputation, clustering, and the combination.
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_results <- rankMethods(int_results, complete = TRUE)
union_results <- rankMethods(union_results, complete = FALSE)
# unlist and make factor for group by later.
int_results$cluster <- as.factor(unlist(int_results$cluster))
int_results$imputation <- as.factor(unlist(int_results$imputation))
union_results$cluster <- as.factor(unlist(union_results$cluster))
union_results$imputation <- as.factor(unlist(union_results$imputation))
########################################################################################################
#### METHOD
## get top 1, 3, and 5 indicators for intersection and union
# group by method, get top 1, top 3, top 5 for acc_nmi
top_int_acc <- int_results %>%
group_by(method) %>%
summarise(top1_acc_nmi = sum(acc_nmi_rank == 1),
top3_acc_nmi = sum(acc_nmi_rank < 4),
top5_acc_nmi = sum(acc_nmi_rank < 6))
# melt top_int
top_int_acc_melt <- melt(top_int_acc, id.vars = 'method')
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=15),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
############################################################################################################
# group by method, get top 1, top 3, top 5 for pva
# group by method, get top 1, top 3, top 5 for pval
top_int_pval <- int_results %>%
group_by(method) %>%
summarise(top1_pval = sum(pval_ci_rank == 1),
top3_pval = sum(pval_ci_rank < 4),
top5_pval = sum(pval_ci_rank < 6))
# melt top_int
top_int_pval_melt <- melt(top_int_pval, id.vars = 'method')
# plot
ggplot(data = top_int_pval_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity')  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="Pval and CI Ranking ",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=15),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
top_int_pval <- int_results %>%
group_by(method) %>%
summarise(top1_pval = sum(pval_ci_rank == 1),
top3_pval = sum(pval_ci_rank < 4),
top5_pval = sum(pval_ci_rank < 6))
exon <- read.csv('/home/benbrew/Desktop/KIRC_rna_gene.txt')
exon <- read.csv('/home/benbrew/Desktop/KIRC_rna_gene.txt', nrow = 10)
View(exon)
exon <- read.delim('/home/benbrew/Desktop/KIRC_rna_gene.txt', nrow = 10)
View(exon)
View(exon)
# iniiate folders
################################################################################################
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# initialize fixed variables
cancer <- c("BRCA", "KIRC", "LIHC", "LUAD", "LUSC")
################################################################################################
# Load data
int_results <- read.csv(paste0(results_folder, '/final_results_intersection.csv'))
union_results <- read.csv(paste0(results_folder, '/final_results_union.csv'))
################################################################################################
# Get rid of unnecessary columns
int_results$cluster <- NULL
int_results$union_rank <- NULL
union_results$clusters <- NULL
################################################################################################
## add rank to for each imputation and clustering method and combination of methods
# create a variable for imputation and cluster
createColumn <-
function(data, impute) {
temp <- strsplit(as.character(data$method), '.', fixed = TRUE)
if (impute) {
temp.2 <- lapply(temp, function(x) x[length(x)])
data$imputation <- temp.2
} else {
temp.2 <- lapply(temp, function(x) x[length(x) - 1])
data$cluster <- temp.2
}
return(data)
}
int_results <- createColumn(int_results, impute = TRUE)
int_results <- createColumn(int_results, impute = FALSE)
union_results <- createColumn(union_results, impute = TRUE)
union_results <- createColumn(union_results, impute = FALSE)
# create ranking for imputation, clustering, and the combination.
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_results <- rankMethods(int_results, complete = TRUE)
union_results <- rankMethods(union_results, complete = FALSE)
# unlist and make factor for group by later.
int_results$cluster <- as.factor(unlist(int_results$cluster))
int_results$imputation <- as.factor(unlist(int_results$imputation))
union_results$cluster <- as.factor(unlist(union_results$cluster))
union_results$imputation <- as.factor(unlist(union_results$imputation))
########################################################################################################
#### METHOD
## get top 1, 3, and 5 indicators for intersection and union
# group by method, get top 1, top 3, top 5 for acc_nmi
top_int_acc <- int_results %>%
group_by(method) %>%
summarise(top1_acc_nmi = sum(acc_nmi_rank == 1),
top3_acc_nmi = sum(acc_nmi_rank < 4),
top5_acc_nmi = sum(acc_nmi_rank < 6))
# melt top_int
top_int_acc_melt <- melt(top_int_acc, id.vars = 'method')
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey50", "grey90"), name="ACC and NMI Ranking",
breaks=c("top1_acc_nmi", "top3_acc_nmi", "top5_acc_nmi"),
labels=c("Rank 1", "Top 3", "Top 5")) + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=15),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
# group by method, get top 1, top 3, top 5 acc_nmi
top_int_acc <- int_results %>%
group_by(method) %>%
summarise(top20 = sum(acc_nmi_rank > 0 & acc_nmi_rank <= 3),
top20_40 = sum(acc_nmi_rank > 3 & acc_nmi_rank <= 6),
top40_60 = sum(acc_nmi_rank > 6 & acc_nmi_rank <= 9),
top60_80 = sum(acc_nmi_rank > 9 & acc_nmi_rank <= 12),
top80_100 = sum(acc_nmi_rank > 12 & acc_nmi_rank <= 15))
# melt top_int
top_int_acc_melt <- melt(top_int_acc, id.vars = 'method')
# plot
ggplot(data = top_int_acc_melt, aes(reorder(method, -value), value, fill = variable)) +
geom_bar(stat = 'identity', alpha = 0.7)  +  xlab('Method') + ylab('') + scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
ggtitle('Intersection') +
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70", "grey90"), name="ACC and NMI Ranking",
breaks=c("top20", "top20_40", "top40_60", "top60_80", "top80_100" ),
labels=c("1st Quintile", "2nd Quintile", "3rd Quintile", "4th Quintile", "5th Quintile")) +
theme(panel.background=element_rect(fill="white"),
plot.background=element_rect(fill="#F0F0F0"),
panel.grid.major=element_line(colour="#F0F0F0",size=.75), axis.ticks=element_blank(),
legend.position="right", #legend.title = element_blank(),
legend.background = element_rect(fill="#F0F0F0"),
plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#535353",size=15),
axis.text.x=element_text(size=11,colour="#535353",face="bold", angle = 45, hjust = 1),
axis.text.y=element_text(size=11,colour="#535353",face="bold"),
axis.title.y=element_text(size=11,colour="#535353",face="bold",vjust=1.5),
axis.title.x=element_text(size=11,colour="#535353",face="bold",vjust=-.5),
plot.margin = unit(c(1, 1, .5, .7), "cm"))
