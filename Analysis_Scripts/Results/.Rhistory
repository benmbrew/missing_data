cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank_int = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank_union = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_rank <- rankMethods(testScores, complete = TRUE)
union_rank <- rankMethods(testScoresOrig, complete = FALSE)
########################################################################################
# # For total ranking. That is, top ranked for total_rank in intersection and top rank for total_rank in union
#
# # first assign qunitle ranking to both intersection and union
# int_rank$quintile_int <- ifelse(int_rank$total_rank > 0 & int_rank$total_rank <= 3, 'first',
#                             ifelse(int_rank$total_rank > 3 & int_rank$total_rank <= 6, 'second',
#                                    ifelse(int_rank$total_rank > 6 & int_rank$total_rank <= 9, 'third',
#                                           ifelse(int_rank$total_rank > 9 & int_rank$total_rank <= 12, 'fourth', 'fifth'))))
#
# union_rank$quintile_union <- ifelse(union_rank$total_rank > 0 & union_rank$total_rank <= 3, 'first',
#                             ifelse(union_rank$total_rank > 3 & union_rank$total_rank <= 6, 'second',
#                                    ifelse(union_rank$total_rank > 6 & union_rank$total_rank <= 9, 'third',
#                                           ifelse(union_rank$total_rank > 9 & union_rank$total_rank <= 12, 'fourth', 'fifth'))))
rm(testScores, testScoresOrig)
#########################################################################################
## Create data frame that has counts for number of time method is in same quintile in intersection and union
# fir
int_rank$cancer_method <- paste0(int_rank$cancer,'_', int_rank$method)
union_rank$cancer_method <- paste0(union_rank$cancer,'_', union_rank$method)
# left join on cancer_method
dat <- left_join(int_rank,
union_rank,
by = 'cancer_method')
# remove unnecessary columns
dat <- dat[, c('cancer',
'cancer_method',
'pval_ci_rank',
'acc_nmi_rank',
'total_rank_int',
'total_rank_union')]
View(dat)
dat <- dat[, c('cancer.x',
'cancer_method',
'pval_ci_rank',
'acc_nmi_rank',
'total_rank_int',
'total_rank_union')]
# for total score of intersection and total union
dat$total <- NA
for (i in 1:nrow(dat)) {
if (dat$total_rank_int[i] == dat$total_rank_union[i]) {
dat$total[i] <- TRUE
} else if (abs(dat$total_rank_int[i] - dat$total_rank_union[i]) == 1) {
dat$total[i] <- TRUE
} else if (abs(dat$total_rank_int[i] - dat$total_rank_union[i]) > 1) {
dat$total[i] <- FALSE
}
}
# for acc_nmi of intersection and total union
dat$total_acc_nmi <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$total_rank_union[i]) {
dat$total_acc_nmi[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$total_rank_union[i]) == 1) {
dat$total_acc_nmi[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$total_rank_union[i]) > 1) {
dat$total_acc_nmi[i] <- FALSE
}
}
# for pval_ci of intersection and total union
dat$total_pval_ci <- NA
for (i in 1:nrow(dat)) {
if (dat$pval_ci_rank[i] == dat$total_rank_union[i]) {
dat$total_pval_ci[i] <- TRUE
} else if (abs(dat$pval_ci_rank[i] - dat$total_rank_union[i]) == 1) {
dat$total_pval_ci[i] <- TRUE
} else if (abs(dat$pval_ci_rank[i] - dat$total_rank_union[i]) > 1) {
dat$total_pval_ci[i] <- FALSE
}
}
View(dat)
names(dat)
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(total = sum(total == TRUE),
total_acc_nmi = sum(total_acc_nmi == TRUE),
total_pval_ci = sum(total_acc_nmi == TRUE))
View(dat_counts)
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(total = sum(total == TRUE),
total_acc_nmi = sum(total_acc_nmi == TRUE),
total_pval_ci = sum(total_pval_ci == TRUE))
View(dat)
View(dat_counts)
head(dat)
dat$acc_pval <- NA
names(dat)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 1) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 2) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 2) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
# the number of times a method is ranked in the same quintile for intersection and
library(ggplot2)
library(reshape2)
library(dplyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
testScores <- read.csv(paste0(results_folder, '/testScores.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresOrig.csv'))
# remove unneeded columns
testScoresOrig$acc <- NULL
testScoresOrig$nmi <- NULL
# add acc and nmi, pval and ci
testScores$acc_nmi <- testScores$acc + testScores$nmi
testScores$pval_ci <- testScores$pval + testScores$ci
testScores$total <- testScores$acc_nmi + testScores$pval_ci
testScoresOrig$total <- testScoresOrig$pval + testScoresOrig$ci
# get ranking for each method
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank_int = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank_union = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_rank <- rankMethods(testScores, complete = TRUE)
union_rank <- rankMethods(testScoresOrig, complete = FALSE)
########################################################################################
# # For total ranking. That is, top ranked for total_rank in intersection and top rank for total_rank in union
#
# # first assign qunitle ranking to both intersection and union
# int_rank$quintile_int <- ifelse(int_rank$total_rank > 0 & int_rank$total_rank <= 3, 'first',
#                             ifelse(int_rank$total_rank > 3 & int_rank$total_rank <= 6, 'second',
#                                    ifelse(int_rank$total_rank > 6 & int_rank$total_rank <= 9, 'third',
#                                           ifelse(int_rank$total_rank > 9 & int_rank$total_rank <= 12, 'fourth', 'fifth'))))
#
# union_rank$quintile_union <- ifelse(union_rank$total_rank > 0 & union_rank$total_rank <= 3, 'first',
#                             ifelse(union_rank$total_rank > 3 & union_rank$total_rank <= 6, 'second',
#                                    ifelse(union_rank$total_rank > 6 & union_rank$total_rank <= 9, 'third',
#                                           ifelse(union_rank$total_rank > 9 & union_rank$total_rank <= 12, 'fourth', 'fifth'))))
rm(testScores, testScoresOrig)
#########################################################################################
## Create data frame that has counts for number of time method is in same quintile in intersection and union
# first paste cancer and method together
int_rank$cancer_method <- paste0(int_rank$cancer,'_', int_rank$method)
union_rank$cancer_method <- paste0(union_rank$cancer,'_', union_rank$method)
# left join on cancer_method
dat <- left_join(int_rank,
union_rank,
by = 'cancer_method')
# remove unnecessary columns
dat <- dat[, c('cancer.x',
'cancer_method',
'pval_ci_rank',
'acc_nmi_rank',
'total_rank_int',
'total_rank_union')]
#############################################################################################
## check if method is in within 1 place (up or down) in both int and union
# for total score of intersection and total union
dat$total <- NA
for (i in 1:nrow(dat)) {
if (dat$total_rank_int[i] == dat$total_rank_union[i]) {
dat$total[i] <- TRUE
} else if (abs(dat$total_rank_int[i] - dat$total_rank_union[i]) == 1) {
dat$total[i] <- TRUE
} else if (abs(dat$total_rank_int[i] - dat$total_rank_union[i]) > 1) {
dat$total[i] <- FALSE
}
}
# for acc_nmi of intersection and total union
dat$total_acc_nmi <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$total_rank_union[i]) {
dat$total_acc_nmi[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$total_rank_union[i]) == 1) {
dat$total_acc_nmi[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$total_rank_union[i]) > 1) {
dat$total_acc_nmi[i] <- FALSE
}
}
# for pval_ci of intersection and total union
dat$total_pval_ci <- NA
for (i in 1:nrow(dat)) {
if (dat$pval_ci_rank[i] == dat$total_rank_union[i]) {
dat$total_pval_ci[i] <- TRUE
} else if (abs(dat$pval_ci_rank[i] - dat$total_rank_union[i]) == 1) {
dat$total_pval_ci[i] <- TRUE
} else if (abs(dat$pval_ci_rank[i] - dat$total_rank_union[i]) > 1) {
dat$total_pval_ci[i] <- FALSE
}
}
###############################################################################################
# group by cancer
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(total = sum(total == TRUE),
total_acc_nmi = sum(total_acc_nmi == TRUE),
total_pval_ci = sum(total_pval_ci == TRUE))
##############################################################################################
# Find methods that have consistent scores for acc_nmi and pval_ci
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 2) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 2) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1|2) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 1|2) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1|2) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 2) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 2 ||
abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 2) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(acc_pval = sum(acc_pval == TRUE))
View(dat_counts)
# Find methods that have consistent scores for acc_nmi and pval_ci
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 3 ||
abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 2 ||
abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 3) {
dat$acc_pval[i] <- FALSE
}
}
View(dat)
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(acc_pval = sum(acc_pval == TRUE))
View(dat_counts)
# for total score of intersection and total union
dat$acc_pval <- NA
for (i in 1:nrow(dat)) {
if (dat$acc_nmi_rank[i] == dat$pval_ci_rank[i]) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 2 ||
abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) == 1) {
dat$acc_pval[i] <- TRUE
} else if (abs(dat$acc_nmi_rank[i] - dat$pval_ci_rank[i]) > 2) {
dat$acc_pval[i] <- FALSE
}
}
###############################################################################################
# group by cancer
dat_counts <- dat %>% group_by(cancer.x) %>% summarise(acc_pval = sum(acc_pval == TRUE))
View(dat)
View(dat_counts)
# the number of times a method is ranked in the same quintile for intersection and
library(ggplot2)
library(reshape2)
library(dplyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
testScores <- read.csv(paste0(results_folder, '/testScoresAllInt.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresAllUnion.csv'))
testScoresOrig$acc <- NULL
testScoresOrig$nmi <- NULL
testScores$acc_nmi <- testScores$acc + testScores$nmi
testScores$pval_ci <- testScores$pval + testScores$ci
testScores$total <- testScores$acc_nmi + testScores$pval_ci
testScoresOrig$total <- testScoresOrig$pval + testScoresOrig$ci
View(testScores)
# get ranking for each method
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank_int = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank_union = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_rank <- rankMethods(testScores, complete = TRUE)
union_rank <- rankMethods(testScoresOrig, complete = FALSE)
View(int_rank)
View(union_rank)
# the number of times a method is ranked in the same quintile for intersection and
library(ggplot2)
library(reshape2)
library(dplyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
testScores <- read.csv(paste0(results_folder, '/testScoresAllInt.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresAllUnion.csv'))
# remove unneeded columns
testScoresOrig$acc <- NULL
testScoresOrig$nmi <- NULL
# add acc and nmi, pval and ci
testScores$acc_nmi <- testScores$acc + testScores$nmi
testScores$pval_ci <- testScores$pval + testScores$ci
testScores$total <- testScores$acc_nmi + testScores$pval_ci
testScoresOrig$total <- testScoresOrig$pval + testScoresOrig$ci
View(testScores)
View(testScoresOrig)
View(testScoresOrig)
# the number of times a method is ranked in the same quintile for intersection and
library(ggplot2)
library(reshape2)
library(dplyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
testScores <- read.csv(paste0(results_folder, '/testScoresAllInt.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresAllUnion.csv'))
View(testScoresOrig)
# the number of times a method is ranked in the same quintile for intersection and
library(ggplot2)
library(reshape2)
library(dplyr)
################################################################################################
# Initialize folders,
home_folder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
project_folder <- paste(home_folder, 'Projects/SNF/NM_2015', sep = '/')
scripts_folder <- paste(project_folder, "Scripts", '06_Two_Thousand_Features', sep = "/")
plots_folder <- paste(scripts_folder, "analyze_results/Plots", sep ="/")
results_folder <- paste(project_folder, 'Scripts/06_Results', sep = '/')
source(paste0(results_folder, '/Lib/helpers.R'))
# Load data
testScores <- read.csv(paste0(results_folder, '/testScoresAllInt.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresAllUnion.csv'))
# remove unneeded columns
testScoresOrig$acc <- NULL
testScoresOrig$nmi <- NULL
# add acc and nmi, pval and ci
testScores$acc_nmi <- testScores$acc + testScores$nmi
testScores$pval_ci <- testScores$pval + testScores$ci
testScores$total <- testScores$acc_nmi + testScores$pval_ci
testScoresOrig$total <- testScoresOrig$pval + testScoresOrig$ci
View(testScoresOrig)
View(testScores)
View(testScoresOrig)
testScores <- read.csv(paste0(results_folder, '/testScoresAllInt.csv'))
testScoresOrig <- read.csv(paste0(results_folder, '/testScoresAllUnion.csv'))
View(testScoresOrig)
testScoresOrig$X <- NULL
# add acc and nmi, pval and ci
testScores$acc_nmi <- testScores$acc + testScores$nmi
testScores$pval_ci <- testScores$pval + testScores$ci
testScores$total <- testScores$acc_nmi + testScores$pval_ci
testScoresOrig$total <- testScoresOrig$pval + testScoresOrig$ci
# get ranking for each method
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank_int = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank_union = ave(total,
cancer,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_rank <- rankMethods(testScores, complete = TRUE)
union_rank <- rankMethods(testScoresOrig, complete = FALSE)
########################################################################################
# # For total ranking. That is, top ranked for total_rank in intersection and top rank for total_rank in union
#
# # first assign qunitle ranking to both intersection and union
# int_rank$quintile_int <- ifelse(int_rank$total_rank > 0 & int_rank$total_rank <= 3, 'first',
#                             ifelse(int_rank$total_rank > 3 & int_rank$total_rank <= 6, 'second',
#
View(int_rank)
testScores$cancer_data <- paste0(testScores$cancer, '_', testScores$type)
testScoresOrig$cancer_data <- paste0(testScoresOrig$cancer, '_', testScoresOrig$type)
View(testScores)
# get ranking for each method
rankMethods <- function(data, complete) {
if (complete) {
data <- transform(data,
acc_nmi_rank = ave(acc_nmi,
cancer_data,
FUN = function(x) rank(-x, ties.method = "min")),
pval_ci_rank = ave(pval_ci,
cancer_data,
FUN = function(x) rank(-x, ties.method = "min")),
total_rank_int = ave(total,
cancer_data,
FUN = function(x) rank(-x, ties.method = "min")))
} else {
data <- transform(data,
total_rank_union = ave(total,
cancer_data,
FUN = function(x) rank(-x, ties.method = "min")))
}
return(data)
}
int_rank <- rankMethods(testScores, complete = TRUE)
union_rank <- rankMethods(testScoresOrig, complete = FALSE)
########
View(int_rank)
