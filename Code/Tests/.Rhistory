install.packages('impute')
install.packages('dplyr')
#########################################################################################################
# initiate folders
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
dataFolder <- paste(projectFolder, 'Data', sep = '/')
completeFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"cluster_complete_data", 'Results', 'Labels',sep="/")
imputeOrigFolder <- paste(projectFolder, "Scripts",
"06_Int_Labels",
"evaluate_original_imputation/Results/Clustering", sep="/")
similarityOrigFolder <- paste(projectFolder, "Scripts",
"06_Int_Labels",
"evaluate_original_similarity/Results/Similarity", sep="/")
imputeFolder <- paste(projectFolder, "Scripts",
"06_Int_Labels",
"evaluate_imputation/Results/Clustering", sep="/")
similarityFolder <- paste(projectFolder, "Scripts",
"06_Int_Labels",
"evaluate_similarity/Results/Similarity", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Cluster_Compare", sep="/")
idsFolder <- paste(testFolder, "ids", sep="/")
#########################################################################################################
# Get ids from data for each cancer
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
dataTypes <- c("methyl", "mirna", "mrna")
# Load the original data
loadIDs <- function(cancer, combat = FALSE){
if (cancer == "KIRC" & combat) {
#####################################################################
# Load in raw clinical data for kirc
transposeDataFrame <- function(df, colnamesInd=1) {
variableNames <- df[, colnamesInd]
df <- as.data.frame(t(df[, -colnamesInd]))
colnames(df) <- variableNames
df
}
extractRelevantColumns <- function(data) {
# List of features used for survival analysis
features <- c("admin.batch_number",
"patient.bcr_patient_barcode",
"patient.bcr_patient_uuid",
"patient.days_to_death",
"patient.days_to_last_followup",
"patient.days_to_last_known_alive",
"patient.vital_status",
"patient.gender")
patientFeatures <- paste("patient", features, sep=".")
# Add missing features to the data
missingFeaturesInd <- !(features %in% colnames(data))
data[features[missingFeaturesInd]] <- NA
# Extract and rename the relevant columns
data <- data[features]
colnames(data) <- features
return(data)
}
loadClinData <- function(cancer = 'KIRC') {
#   processingResult <- dataFolder
fileSuffix <- "clinical.txt"
# Load the data
data <- NULL
fileName <- paste(cancer, fileSuffix, sep="_")
filePath <- paste(dataFolder,fileName,
sep="/")
if (file.exists(filePath)) {
data <- read.delim(filePath)
# Transpose the data
data <- transposeDataFrame(data)
}
return(data)
}
# Load clinical data with batch number
cancer <- 'KIRC'
# Process the clinical data
clinicalData <- loadClinData(cancer)
clinicalData <- extractRelevantColumns(clinicalData)
## remove patient from column names
features <- colnames(clinicalData)
split <- strsplit(features, '.', fixed = TRUE)
keepSplit <- lapply(split, function(x) x[length(x)])
features <- unlist(keepSplit)
colnames(clinicalData) <- features
######################################################################
# Load functions
# Note: some functions depend on variables initialized above!
# lsaImputation:
# -imputedFile, incompleteFile, projectFolder, jvmGBLimit
# iClusterClustering:
# -numCores
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
######################################################################
# Load the original data
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(as.matrix(read.delim(filePath)))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- loadData(dataTypes[v], "_cases")
controls[[v]] <- loadData(dataTypes[v], "_controls")
}
#####################################################################
# Generate subsets of the cases derived from the set of individuals
# which are present in all data types
# Extract all cases which appear in all of the data types
completeData <- columnIntersection(cases)
#####################################################################
# subset clinical data by ids in cases
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
transformUnionId <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
return(x)
}
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
for (i in 1:3) {
temp.data  <- unionData[[i]]
temp.names <- transformUnionId(colnames(temp.data))
colnames(temp.data) <- temp.names
temp.data <- temp.data[, !duplicated(colnames(temp.data))]
unionData[[i]] <- temp.data
}
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(unionIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
unionInd <- match(clinicalIDs, unionIDs)
clinicalData$days_to_death <- as.numeric(clinicalData$days_to_death)
clinicalData$days_to_last_followup <- as.numeric(clinicalData$days_to_last_followup)
###### Run combat function
for (i in 1:numViews) {
temp.unionData <- unionData[[i]]
temp.unionData <- temp.unionData[,unionInd]
temp.2.unionData <- temp.unionData[rowSums(temp.unionData, na.rm = T) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.unionData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
unionData[[i]] <- temp_combat
}
unionIds <- colnames(unionData[[1]])
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
# Find the position of the patient IDs in the clinical data
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
clinicalInd <- match(completeIDs, clinicalIDs)
clinicalData <- clinicalData[clinicalInd, ]
# Subset clinical data and completeData by clinicalData
clinicalData <- clinicalData[rowSums(is.na(clinicalData)) < ncol(clinicalData),]
clinicalIDs <- as.character(clinicalData$bcr_patient_barcode)
completeInd <- match(clinicalIDs, completeIDs)
###### Run combat function
for (i in 1:numViews) {
temp.completeData <- completeData[[i]]
temp.completeData <- temp.completeData[,completeInd]
temp.2.completeData <- temp.completeData[rowSums(temp.completeData) != 0,]
temp.modcombat <- model.matrix(~1, data = clinicalData)
temp.batch <- clinicalData$gender
temp_combat = ComBat(dat=temp.2.completeData, batch=temp.batch, mod=temp.modcombat, par.prior=TRUE, prior.plots=FALSE)
completeData[[i]] <- temp_combat
}
completeIds <- transformUnionId(colnames(completeData[[1]]) )
return(list(first = completeIds, second = unionIds))
} else {
dataTypes <- c("methyl", "mirna", "mrna")
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# extract all cases which appear in all of the data types (intersection)
completeData <- columnIntersection(cases) # now ncol in each matrix is the same and identical to each other.
# subset the clinical data so that it corresponds to individuals in the complete data
completeIds <- colnames(completeData[[1]])
# Extract all cases which appear in at least one of the data types
unionData <- columnUnion(cases)
# Subset the clinical data so that it corresponds to individuals
# in the union data
unionIds <- colnames(unionData[[1]])
return(list(first = completeIds, second = unionIds))
}
}
kirc_ids <-loadIDs(cancer = 'KIRC')
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
install.packages
install.packages('clue')
kirc_ids <-loadIDs(cancer = 'KIRC')
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
kirc_ids <-loadIDs(cancer = 'KIRC')
kirc_complete_ids <- kirc_ids[[1]]
kirc_union_ids <- kirc_ids[[2]]
# Get labels for each clustering type, from the intersection for kirc
kirc_com_hier <- as.factor(t(read.table(paste0(completeFolder, '/2_1.txt'))))
kirc_com_iclus <- as.factor(t(read.table(paste0(completeFolder, '/2_2.txt'))))
kirc_com_snf <- as.factor(t(read.table(paste0(completeFolder, '/2_3.txt'))))
# get labels for kirc intersection imputed
# hier
kirc_com_hier_knn <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_knn_hier_comp.txt'))))
kirc_com_hier_lls <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lls_hier_comp.txt'))))
kirc_com_hier_lsa <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lsa_hier_comp.txt'))))
kirc_com_hier_rand <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_rand_hier_comp.txt'))))
#iclust
kirc_com_iclus_knn <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_knn_iclust_comp.txt'))))
kirc_com_iclus_lls <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lls_iclust_comp.txt'))))
kirc_com_iclus_lsa <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lsa_iclust_comp.txt'))))
kirc_com_iclus_rand <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_rand_iclust_comp.txt'))))
#SNF
kirc_com_snf_knn <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_knn_snf_comp.txt'))))
kirc_com_snf_lls <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lls_snf_comp.txt'))))
kirc_com_snf_lsa <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_lsa_snf_comp.txt'))))
kirc_com_snf_rand <- as.factor(t(read.table(paste0(imputeFolder, '/kirc', '/kirc_rand_snf_comp.txt'))))
kirc_com_snf_self <- as.factor(t(read.table(paste0(similarityFolder, '/kirc', '/kirc_self_com_labels.txt'))))
kirc_com_snf_med <- as.factor(t(read.table(paste0(similarityFolder, '/kirc', '/kirc_med_com_labels.txt' ))))
kirc_com_snf_reg <- as.factor(t(read.table(paste0(similarityFolder, '/kirc', '/kirc_reg_com_labels.txt' ))))
###################################################################################################
# Hier
kirc_union_hier_knn  <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_knn_hier_union.txt'))))
kirc_union_hier_lls <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lls_hier_union.txt'))))
kirc_union_hier_lsa <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lsa_hier_union.txt'))))
kirc_union_hier_rand <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_rand_hier_union.txt'))))
#iclust
kirc_union_iclus_knn <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_knn_iclust_union.txt'))))
kirc_union_iclus_lls <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lls_iclust_union.txt'))))
kirc_union_iclus_lsa <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lsa_iclust_union.txt'))))
kirc_union_iclus_rand <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_rand_iclust_union.txt'))))
# SNF
kirc_union_snf_knn <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_knn_snf_union.txt'))))
kirc_union_snf_lls <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lls_snf_union.txt'))))
kirc_union_snf_lsa <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_lsa_snf_union.txt'))))
kirc_union_snf_rand <- as.factor(t(read.table(paste0(imputeOrigFolder, '/kirc/', 'kirc_rand_snf_union.txt'))))
kirc_union_snf_self <- as.factor(t(read.table(paste0(similarityOrigFolder, '/kirc', '/kirc_self_union_labels.txt' ))))
kirc_union_snf_med <- as.factor(t(read.table(paste0(similarityOrigFolder, '/kirc', '/kirc_med_union_labels.txt' ))))
kirc_union_snf_reg <- as.factor(t(read.table(paste0(similarityOrigFolder, '/kirc', '/kirc_reg_union_labels.txt' ))))
#######
# Hierarchical
kirc_hier_stat <- rbind(
append('kirc_com_hier', summary(as.factor(kirc_com_hier))),
append('kirc_com_hier_knn', summary(as.factor(kirc_com_hier_knn))),
append('kirc_com_hier_lls', summary(as.factor(kirc_com_hier_lls))),
append('kirc_com_hier_lsa', summary(as.factor(kirc_com_hier_lsa))),
append('kirc_com_hier_rand', summary(as.factor(kirc_com_hier_rand))),
append('kirc_union_hier_knn', summary(as.factor(kirc_union_hier_knn))),
append('kirc_union_hier_lls', summary(as.factor(kirc_union_hier_lls))),
append('kirc_union_hier_lsa', summary(as.factor(kirc_union_hier_lsa))),
append('kirc_union_hier_rand', summary(as.factor(kirc_union_hier_rand)))
)
kirc_union_hier_knn
# Icluster
kirc_iclust_stat <- rbind(
append('kirc_com_iclust', summary(as.factor(kirc_com_iclus))),
append('kirc_com_iclust_knn', summary(as.factor(kirc_com_iclus_knn))),
append('kirc_com_iclust_lls', summary(as.factor(kirc_com_iclus_lls))),
append('kirc_com_iclust_lsa', summary(as.factor(kirc_com_iclus_lsa))),
append('kirc_com_iclust_rand', summary(as.factor(kirc_com_iclus_rand))),
append('kirc_union_iclust_knn', summary(as.factor(kirc_union_iclus_knn))),
append('kirc_union_iclust_lls', summary(as.factor(kirc_union_iclus_lls))),
append('kirc_union_iclust_lsa', summary(as.factor(kirc_union_iclus_lsa))),
append('kirc_union_iclust_rand', summary(as.factor(kirc_union_iclus_rand)))
)
# SNF
kirc_snf_stat <- rbind(
append('kirc_com_snf', summary(as.factor(kirc_com_snf))),
append('kirc_com_snf_self', summary(as.factor(kirc_com_snf_self))),
append('kirc_com_snf_med', summary(as.factor(kirc_com_snf_med))),
append('kirc_com_snf_reg', summary(as.factor(kirc_com_snf_reg))),
append('kirc_union_snf_self', summary(as.factor(kirc_union_snf_self))),
append('kirc_union_snf_med', summary(as.factor(kirc_union_snf_med))),
append('kirc_union_snf_reg', summary(as.factor(kirc_union_snf_reg)))
)
# Merge ids with labels and get clinical information for each cluster
kirc_com_hier <- as.data.frame(cbind(label = kirc_com_hier, id = kirc_complete_ids))
kirc_com_hier_knn <- as.data.frame(cbind(label = kirc_com_hier_knn, id = kirc_complete_ids))
kirc_com_hier_lls <- as.data.frame(cbind(label = kirc_com_hier_lls, id = kirc_complete_ids))
kirc_com_hier_lsa <- as.data.frame(cbind(label = kirc_com_hier_lsa, id = kirc_complete_ids))
kirc_com_hier_rand <-  as.data.frame(cbind(label = kirc_union_hier_rand, id = kirc_union_ids))
kirc_union_hier_knn <- as.data.frame(cbind(label = kirc_union_hier_knn, id = kirc_union_ids))
kirc_union_hier_lls <- as.data.frame(cbind(label = kirc_union_hier_lls, id = kirc_union_ids))
kirc_union_hier_lsa <- as.data.frame(cbind(label = kirc_union_hier_lsa, id = kirc_union_ids))
kirc_union_hier_rand <-  as.data.frame(cbind(label = kirc_union_hier_rand, id = kirc_union_ids))
kirc_com_iclus <- as.data.frame(cbind(label = kirc_com_iclus, id = kirc_complete_ids))
kirc_com_iclus_knn <- as.data.frame(cbind(label = kirc_com_iclus_knn, id = kirc_complete_ids))
kirc_com_iclus_lls <- as.data.frame(cbind(label = kirc_com_iclus_lls, id = kirc_complete_ids))
kirc_com_iclus_lsa <- as.data.frame(cbind(label = kirc_com_iclus_lsa, id = kirc_complete_ids))
kirc_com_iclus_rand <-  as.data.frame(cbind(label = kirc_union_iclus_rand, id = kirc_union_ids))
kirc_union_iclus_knn <- as.data.frame(cbind(label = kirc_union_iclus_knn, id = kirc_union_ids))
kirc_union_iclus_lls <- as.data.frame(cbind(label = kirc_union_iclus_lls, id = kirc_union_ids))
kirc_union_iclus_lsa <- as.data.frame(cbind(label = kirc_union_iclus_lsa, id = kirc_union_ids))
kirc_union_iclus_rand <-  as.data.frame(cbind(label = kirc_union_iclus_rand, id = kirc_union_ids))
kirc_com_snf <- as.data.frame(cbind(label = kirc_com_snf, id = kirc_complete_ids))
kirc_com_snf_knn <- as.data.frame(cbind(label = kirc_com_snf_knn, id = kirc_complete_ids))
kirc_com_snf_lls <- as.data.frame(cbind(label = kirc_com_snf_lls, id = kirc_complete_ids))
kirc_com_snf_lsa <- as.data.frame(cbind(label = kirc_com_snf_lsa, id = kirc_complete_ids))
kirc_com_snf_rand <-  as.data.frame(cbind(label = kirc_union_snf_rand, id = kirc_union_ids))
kirc_com_snf_self <- as.data.frame(cbind(label = kirc_com_snf_self, id = kirc_complete_ids))
kirc_com_snf_med <- as.data.frame(cbind(label = kirc_com_snf_med, id = kirc_complete_ids))
kirc_com_snf_reg <- as.data.frame(cbind(label = kirc_com_snf_reg, id = kirc_complete_ids))
kirc_union_snf_knn <- as.data.frame(cbind(label = kirc_union_snf_knn, id = kirc_union_ids))
kirc_union_snf_lls <- as.data.frame(cbind(label = kirc_union_snf_lls, id = kirc_union_ids))
kirc_union_snf_lsa <- as.data.frame(cbind(label = kirc_union_snf_lsa, id = kirc_union_ids))
kirc_union_snf_rand <-  as.data.frame(cbind(label = kirc_union_snf_rand, id = kirc_union_ids))
kirc_union_snf_self <-  as.data.frame(cbind(label = kirc_union_snf_self, id = kirc_union_ids))
kirc_union_snf_med <-  as.data.frame(cbind(label = kirc_union_snf_med, id = kirc_union_ids))
kirc_union_snf_reg <-  as.data.frame(cbind(label = kirc_union_snf_reg, id = kirc_union_ids))
findCommonCluster <- function(data1, data2) {
numClus <- 5
data_intersect_union <- data2[data2$id %in% data1$id,] # intersection of union
data_intersect <- left_join(data_intersect_union, data1, by = 'id') # join intersection of union with intersection
common_clusters <- matrix(,0,5)
cluster_compare <- matrix(,0,5)
for(i in 1:numClus){
sub_intersect <- data_intersect[data_intersect$label.y == i,]
for(j in 1:numClus){
sub_union <- data_intersect[data_intersect$label.x == j,]
cluster_compare[j] <- round((sum(sub_intersect$id %in% sub_union$id)/nrow(sub_intersect))*100, 2)
}
common_clusters <- rbind(common_clusters, cluster_compare)
}
return(common_clusters)
}
kirc_hier_knn_common <- findCommonCluster(kirc_com_hier_knn, kirc_union_hier_knn)
library(dplyr)
kirc_hier_knn_common <- findCommonCluster(kirc_com_hier_knn, kirc_union_hier_knn)
kirc_hier_knn_common
kirc_union_snf_reg
kirc_union_snf_lls
######################################################################
# Load libraries
library(SNFtool)
library(iClusterPlus)
library(impute)
library(survival)
library(dplyr)
######################################################################
# Initialize folders and load data
homeFolder <- "/home/benbrew/hpf/largeprojects/agoldenb/ben"
projectFolder <- paste(homeFolder, "Projects/SNF/NM_2015", sep="/")
testFolder <- paste(projectFolder, "Scripts",
"06_Two_Thousand_Features",
"evaluate_original_imputation", sep="/")
resultsFolder <- paste(testFolder, "Results", sep="/")
numFeat <- 2000
cancer <- 'KIRC'
cancerInd <- 'KIRC'
dataTypes <- c("methyl", "mirna", "mrna")
source(paste(projectFolder, "Scripts/loadFunctions.R", sep="/"))
loadData <- function(dataType, suffix="") {
fileName <- paste(cancer, "_", dataType, suffix,".txt", sep="")
filePath <- paste(projectFolder, "Data", fileName, sep="/")
return(read.delim(filePath))
}
numViews <- length(dataTypes)
cases <- vector("list", numViews)
controls <- vector("list", numViews)
# Load the biological data
for (v in 1:numViews) {
cases[[v]] <- as.matrix(loadData(dataTypes[v], "_cases"))
controls[[v]] <- as.matrix(loadData(dataTypes[v], "_controls"))
}
# Load the clinical data
clinicalData <- loadData("clin")
###################################################################
# Transform patient IDs to the clinical ID format
transformIDFormat <- function(x) {
# Keep the first 12 characters
x <- substr(x, 1, 12)
# Change each "." to "-"
x <- gsub(".", "-", x, fixed=TRUE)
# Make all letters lowercase
x <- tolower(x)
return(x)
}
# Union data
unionData <- columnUnion(cases)
unionIDs <- colnames(unionData[[1]])
unionIDs <- transformIDFormat(unionIDs)
clinicalIDsUnion <- as.character(clinicalData$bcr_patient_barcode)
clinicalIndUnion <- match(unionIDs, clinicalIDsUnion)
clinicalDataUnion <- clinicalData[clinicalIndUnion, ]
# Complete data
completeData <- columnIntersection(cases)
completeIDs <- colnames(completeData[[1]])
completeIDs <- transformIDFormat(completeIDs)
clinicalIDsComplete <- as.character(clinicalData$bcr_patient_barcode)
clinicalIndComplete <- match(completeIDs, clinicalIDsComplete)
clinicalDataComplete <- clinicalData[clinicalIndComplete, ]
# get patients left our of the column intersection, that is patients in union, not in intersection.
clinicalExtra <- clinicalDataUnion[!clinicalDataUnion$bcr_patient_barcode %in% clinicalDataComplete$bcr_patient_barcode,]
# Summary stats of this group
statsExtra <- summary(clinicalExtra)
################################################################################################
# Cluster the complete data with SNF 5 clusters, not random removal or imptutation
featureSubsetIndices <- function(cases, subsetSize=numFeat) {
numViews <- length(cases)
featureSubsetInd <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the t-test p-value for each feature, grouped by cases
# and controls
numFeatures <- nrow(cases[[v]])
pval <- sapply(1:numFeatures,
function(i) t.test(cases[[v]][i, ],
controls[[v]][i, ])$p.value)
# Subset the data keeping the features with the smallest p-values
ind <- order(pval)
featureSubsetInd[[v]] <- ind[1:min(subsetSize, numFeatures)]
}
return(featureSubsetInd)
}
subsetData <- function(data, ind) {
for (v in 1:length(data)) {
data[[v]] <- data[[v]][ind[[v]], ]
}
return(data)
}
completeInd <- featureSubsetIndices(completeData)
completeData <- subsetData(completeData, completeInd)
unionInd <- featureSubsetIndices(unionData)
unionData <- subsetData(unionData, unionInd)
######################################################################
# Normalize the features in the data sets.
rowStatistics <- function(cases) {
numViews <- length(cases)
rowStats <- vector("list", numViews)
for (v in 1:numViews) {
# Calculate the row means and standard deviations
rowMean <- apply(cases[[v]], 1, mean, na.rm=TRUE)
rowSd <- apply(cases[[v]], 1, sd, na.rm=TRUE)
constantInd <- rowSd==0
rowSd[constantInd] <- 1
rowStats[[v]] <- list(mean=rowMean, sd=rowSd, ind=constantInd)
}
return(rowStats)
}
normalizeData <- function(data, stat) {
for (v in 1:length(data)) {
data[[v]] <- (data[[v]] - stat[[v]]$mean) / stat[[v]]$sd
data[[v]] <- data[[v]][!stat[[v]]$ind, ]
}
return(data)
}
completeStat <- rowStatistics(completeData)
completeData <- normalizeData(completeData, completeStat)
unionStat <- rowStatistics(unionData)
unionData <- normalizeData(unionData, unionStat)
###### Cluster with SNF
sampleRows = FALSE
numClus = 5
labelsComplete <- SNFClustering(completeData, numClus, sampleRows)
library(SNFtool)
library(SNFtool)
library(iClusterPlus)
install.packages('iClusterPlus')
install.packages('impute')
source("https://bioconductor.org/biocLite.R")
biocLite("iClusterPlus")
biocLite("impute")
install.packages('survival')
install.packages("survival")
library(dplyr)
library(ggplot2)
install.packages('ggplot2')
library(RColorBrewer)
library(dplyr)
install.packages('igraph')
library("foreach")
library("ROCR")
install.packages('ROCR')
install.packages('doParallel')
install.packages('caret')
install.packages('glmnet')
install.packages('randomForest')
install.packages('kernlab')
install.packages('pROC')
install.packages('preprocessCore')
install.packages('preprocessCore')
install.packages('reshape2')
install.packages('FDb.InfiniumMethylation.hg19')
biocLite("FDb.InfiniumMethylation.hg19")
source("https://bioconductor.org/biocLite.R")
biocLite("FDb.InfiniumMethylation.hg19")
library(FDb.InfiniumMethylation.hg19)
